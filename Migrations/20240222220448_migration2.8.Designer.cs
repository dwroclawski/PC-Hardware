// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VueBase.Data;

#nullable disable

namespace VueBase.Migrations
{
    [DbContext(typeof(PCContext))]
    [Migration("20240222220448_migration2.8")]
    partial class migration28
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Join_Case_Buttons", b =>
                {
                    b.Property<int>("ButtonsId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.HasKey("ButtonsId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("Join_Case_Buttons");
                });

            modelBuilder.Entity("Join_Case_Color", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("Join_Case_Color");
                });

            modelBuilder.Entity("Join_Case_DriveBay", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("DriveBayId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "DriveBayId");

                    b.HasIndex("DriveBayId");

                    b.ToTable("Join_Case_DriveBay");
                });

            modelBuilder.Entity("Join_Case_FormFactor", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "FormFactorId");

                    b.HasIndex("FormFactorId");

                    b.ToTable("Join_Case_FormFactor");
                });

            modelBuilder.Entity("Join_Case_Material", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Join_Case_Material");
                });

            modelBuilder.Entity("Join_Case_Port", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "PortId");

                    b.HasIndex("PortId");

                    b.ToTable("Join_Case_Port");
                });

            modelBuilder.Entity("Join_Case_PSUMount", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("PSUMountId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "PSUMountId");

                    b.HasIndex("PSUMountId");

                    b.ToTable("Join_Case_PSUMount");
                });

            modelBuilder.Entity("Join_CaseCooler_Color", b =>
                {
                    b.Property<int>("CaseCoolerId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("CaseCoolerId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("Join_CaseCooler_Color");
                });

            modelBuilder.Entity("Join_CPU_Color", b =>
                {
                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("CPUId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("Join_CPU_Color");
                });

            modelBuilder.Entity("Join_CPU_MemoryTypeFrequency", b =>
                {
                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeFrequencyId")
                        .HasColumnType("int");

                    b.HasKey("CPUId", "MemoryTypeFrequencyId");

                    b.HasIndex("MemoryTypeFrequencyId");

                    b.ToTable("Join_CPU_MemoryTypeFrequency");
                });

            modelBuilder.Entity("Join_CPU_MotherboardChipset", b =>
                {
                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardChipsetId")
                        .HasColumnType("int");

                    b.HasKey("CPUId", "MotherboardChipsetId");

                    b.HasIndex("MotherboardChipsetId");

                    b.ToTable("Join_CPU_MotherboardChipset");
                });

            modelBuilder.Entity("Join_CPUCooler_Color", b =>
                {
                    b.Property<int>("CPUCoolerId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("CPUCoolerId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("Join_CPUCooler_Color");
                });

            modelBuilder.Entity("Join_CPUCooler_Material", b =>
                {
                    b.Property<int>("CPUCoolerId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("CPUCoolerId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Join_CPUCooler_Material");
                });

            modelBuilder.Entity("Join_GPU_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("GPUId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "GPUId");

                    b.HasIndex("GPUId");

                    b.ToTable("Join_GPU_Color");
                });

            modelBuilder.Entity("Join_GPU_Port", b =>
                {
                    b.Property<int>("GPUId")
                        .HasColumnType("int");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.HasKey("GPUId", "PortId");

                    b.HasIndex("PortId");

                    b.ToTable("Join_GPU_Port");
                });

            modelBuilder.Entity("Join_HDD_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("HDDId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "HDDId");

                    b.HasIndex("HDDId");

                    b.ToTable("Join_HDD_Color");
                });

            modelBuilder.Entity("Join_Motherboard_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_Motherboard_Color");
                });

            modelBuilder.Entity("Join_Motherboard_ExternalConnector", b =>
                {
                    b.Property<int>("ExternalConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("ExternalConnectorId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_Motherboard_ExternalConnector");
                });

            modelBuilder.Entity("Join_Motherboard_InternalConnector", b =>
                {
                    b.Property<int>("InternalConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("InternalConnectorId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_Motherboard_InternalConnector");
                });

            modelBuilder.Entity("Join_Motherboard_MemoryFrequency", b =>
                {
                    b.Property<int>("MemoryFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("MemoryFrequencyId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_Motherboard_MemoryFrequency");
                });

            modelBuilder.Entity("Join_Motherboard_MemorySlots", b =>
                {
                    b.Property<int>("MemorySlotsId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("MemorySlotsId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_Motherboard_MemorySlots");
                });

            modelBuilder.Entity("Join_Motherboard_RAID", b =>
                {
                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<int>("RAIDId")
                        .HasColumnType("int");

                    b.HasKey("MotherboardId", "RAIDId");

                    b.HasIndex("RAIDId");

                    b.ToTable("Join_Motherboard_RAID");
                });

            modelBuilder.Entity("Join_Motherboard_WirelessTechnology", b =>
                {
                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<int>("WirelessTechnologyId")
                        .HasColumnType("int");

                    b.HasKey("MotherboardId", "WirelessTechnologyId");

                    b.HasIndex("WirelessTechnologyId");

                    b.ToTable("Join_Motherboard_WirelessTechnology");
                });

            modelBuilder.Entity("Join_PSU_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "PSUId");

                    b.HasIndex("PSUId");

                    b.ToTable("Join_PSU_Color");
                });

            modelBuilder.Entity("Join_PSU_Connector", b =>
                {
                    b.Property<int>("ConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.HasKey("ConnectorId", "PSUId");

                    b.HasIndex("PSUId");

                    b.ToTable("Join_PSU_Connector");
                });

            modelBuilder.Entity("Join_PSU_ProtectionFeatures", b =>
                {
                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.Property<int>("ProtectionFeaturesId")
                        .HasColumnType("int");

                    b.HasKey("PSUId", "ProtectionFeaturesId");

                    b.HasIndex("ProtectionFeaturesId");

                    b.ToTable("Join_PSU_ProtectionFeatures");
                });

            modelBuilder.Entity("Join_RAM_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("RAMId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "RAMId");

                    b.HasIndex("RAMId");

                    b.ToTable("Join_RAM_Color");
                });

            modelBuilder.Entity("Join_SSD_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("SSDId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "SSDId");

                    b.HasIndex("SSDId");

                    b.ToTable("Join_SSD_Color");
                });

            modelBuilder.Entity("VueBase.Models.Architecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Architecture");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 4,
                            Name = "nm_4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "nm_5"
                        },
                        new
                        {
                            Id = 7,
                            Name = "nm_7"
                        },
                        new
                        {
                            Id = 10,
                            Name = "nm_10"
                        },
                        new
                        {
                            Id = 12,
                            Name = "nm_12"
                        },
                        new
                        {
                            Id = 14,
                            Name = "nm_14"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Buttons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Buttons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Power"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reset"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Cache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Cache");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 128,
                            Name = "KB_128"
                        },
                        new
                        {
                            Id = 256,
                            Name = "KB_256"
                        },
                        new
                        {
                            Id = 512,
                            Name = "KB_512"
                        },
                        new
                        {
                            Id = 1000,
                            Name = "MB_1"
                        },
                        new
                        {
                            Id = 2000,
                            Name = "MB_2"
                        },
                        new
                        {
                            Id = 4000,
                            Name = "MB_4"
                        },
                        new
                        {
                            Id = 8000,
                            Name = "MB_8"
                        },
                        new
                        {
                            Id = 16000,
                            Name = "MB_16"
                        },
                        new
                        {
                            Id = 32000,
                            Name = "MB_32"
                        },
                        new
                        {
                            Id = 64000,
                            Name = "MB_64"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Capacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Capacity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 16,
                            Name = "16 GB"
                        },
                        new
                        {
                            Id = 32,
                            Name = "32 GB"
                        },
                        new
                        {
                            Id = 64,
                            Name = "64 GB"
                        },
                        new
                        {
                            Id = 128,
                            Name = "128 GB"
                        },
                        new
                        {
                            Id = 256,
                            Name = "256 GB"
                        },
                        new
                        {
                            Id = 512,
                            Name = "512 GB"
                        },
                        new
                        {
                            Id = 1000,
                            Name = "1 TB"
                        },
                        new
                        {
                            Id = 2000,
                            Name = "2 TB"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("FanBaysId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InstalledFansId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PSUId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int?>("SidePanelMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("WaterCoolingSlotsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FanBaysId");

                    b.HasIndex("InstalledFansId");

                    b.HasIndex("PSUId");

                    b.HasIndex("ProducerID");

                    b.HasIndex("SidePanelMaterialId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WaterCoolingSlotsId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("VueBase.Models.CaseCooler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectorId")
                        .HasColumnType("int");

                    b.Property<int?>("ConnectorsId")
                        .HasColumnType("int");

                    b.Property<decimal>("FanAirflow")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FanBearingId")
                        .HasColumnType("int");

                    b.Property<decimal>("FanNoiseLevel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FanSpeedId")
                        .HasColumnType("int");

                    b.Property<int>("FansId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MTBFId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorsId");

                    b.HasIndex("FanBearingId");

                    b.HasIndex("FanSpeedId");

                    b.HasIndex("FansId");

                    b.HasIndex("MTBFId");

                    b.HasIndex("ProducerID");

                    b.ToTable("CaseCooler");
                });

            modelBuilder.Entity("VueBase.Models.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CaseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Full Tower"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mid Tower"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mini Tower"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CellType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CellType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MLC"
                        },
                        new
                        {
                            Id = 3,
                            Name = "QLC"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SLC"
                        },
                        new
                        {
                            Id = 5,
                            Name = "TLC"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 8,
                            Name = "White"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Gold"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Connectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Connectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SATA"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PCI_E"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MOLEX"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Cooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Cooling");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 120,
                            Name = "Fan_120mm"
                        },
                        new
                        {
                            Id = 135,
                            Name = "Fan_135mm"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CoolingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CoolingType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Water"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArchitectureId")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BoostClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL1Id")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL2Id")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL3Id")
                        .HasColumnType("int");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<int>("DataWidthId")
                        .HasColumnType("int");

                    b.Property<int>("InternalGPUId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMemoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxWattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.Property<bool>("UnlockedMultiplier")
                        .HasColumnType("bit");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ArchitectureId");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("CacheL1Id");

                    b.HasIndex("CacheL2Id");

                    b.HasIndex("CacheL3Id");

                    b.HasIndex("DataWidthId");

                    b.HasIndex("InternalGPUId");

                    b.HasIndex("MaxMemoryId");

                    b.HasIndex("ProducerID");

                    b.ToTable("CPU");
                });

            modelBuilder.Entity("VueBase.Models.CPUCooler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectorId")
                        .HasColumnType("int");

                    b.Property<int?>("ConnectorsId")
                        .HasColumnType("int");

                    b.Property<int>("CoolingTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("FanAirflow")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FanBearingId")
                        .HasColumnType("int");

                    b.Property<decimal>("FanNoiseLevel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FanSpeedId")
                        .HasColumnType("int");

                    b.Property<int>("FansId")
                        .HasColumnType("int");

                    b.Property<int>("HeatPipesId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MTBFId")
                        .HasColumnType("int");

                    b.Property<int>("MountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int>("SocketId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorsId");

                    b.HasIndex("CoolingTypeId");

                    b.HasIndex("FanBearingId");

                    b.HasIndex("FanSpeedId");

                    b.HasIndex("FansId");

                    b.HasIndex("HeatPipesId");

                    b.HasIndex("MTBFId");

                    b.HasIndex("MountId");

                    b.HasIndex("ProducerID");

                    b.HasIndex("SocketId");

                    b.ToTable("CPUCooler");
                });

            modelBuilder.Entity("VueBase.Models.CPUFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_PUFamily");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intel"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CPUSocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CPUSocket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LGA_1200"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AM4"
                        },
                        new
                        {
                            Id = 4,
                            Name = "LGA_1151"
                        },
                        new
                        {
                            Id = 5,
                            Name = "LGA_2066"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CycleLatency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CycleLatency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cl2_5"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CL3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CL4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CL5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CL6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CL7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CL8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "CL9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cl10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "CL11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "CL12"
                        },
                        new
                        {
                            Id = 13,
                            Name = "CL13"
                        },
                        new
                        {
                            Id = 14,
                            Name = "CL14"
                        },
                        new
                        {
                            Id = 15,
                            Name = "CL15"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CL16"
                        },
                        new
                        {
                            Id = 17,
                            Name = "CL17"
                        },
                        new
                        {
                            Id = 18,
                            Name = "CL18"
                        },
                        new
                        {
                            Id = 19,
                            Name = "CL19"
                        },
                        new
                        {
                            Id = 20,
                            Name = "CL20"
                        },
                        new
                        {
                            Id = 21,
                            Name = "CL21"
                        },
                        new
                        {
                            Id = 22,
                            Name = "CL22"
                        },
                        new
                        {
                            Id = 26,
                            Name = "CL36"
                        },
                        new
                        {
                            Id = 28,
                            Name = "CL28"
                        },
                        new
                        {
                            Id = 30,
                            Name = "CL30"
                        },
                        new
                        {
                            Id = 32,
                            Name = "CL32"
                        },
                        new
                        {
                            Id = 34,
                            Name = "CL34"
                        },
                        new
                        {
                            Id = 38,
                            Name = "CL38"
                        },
                        new
                        {
                            Id = 40,
                            Name = "CL40"
                        },
                        new
                        {
                            Id = 42,
                            Name = "CL42"
                        },
                        new
                        {
                            Id = 44,
                            Name = "CL44"
                        },
                        new
                        {
                            Id = 46,
                            Name = "CL46"
                        },
                        new
                        {
                            Id = 48,
                            Name = "CL48"
                        });
                });

            modelBuilder.Entity("VueBase.Models.DataWidth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_DataWidth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Bit_32"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Bit_64"
                        });
                });

            modelBuilder.Entity("VueBase.Models.DriveBay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Drivebay");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 125,
                            Name = "1 x 2.5''"
                        },
                        new
                        {
                            Id = 135,
                            Name = "1 x 3.5''"
                        },
                        new
                        {
                            Id = 225,
                            Name = "2 x 2.5''"
                        },
                        new
                        {
                            Id = 235,
                            Name = "2 x 3.5''"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Encryption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Encryption");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "No"
                        });
                });

            modelBuilder.Entity("VueBase.Models.ExternalConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_ExternalConnector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USB_2_0"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USB_3_2_Gen_1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "USB_3_2_Gen_2"
                        },
                        new
                        {
                            Id = 5,
                            Name = "USB_3_2_Gen_2x2"
                        },
                        new
                        {
                            Id = 6,
                            Name = "USB_4"
                        },
                        new
                        {
                            Id = 7,
                            Name = "USB_C"
                        },
                        new
                        {
                            Id = 8,
                            Name = "HDMI"
                        },
                        new
                        {
                            Id = 9,
                            Name = "DP"
                        },
                        new
                        {
                            Id = 10,
                            Name = "VGA"
                        },
                        new
                        {
                            Id = 11,
                            Name = "DVI"
                        },
                        new
                        {
                            Id = 12,
                            Name = "RJ_45"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Audio"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Optical"
                        },
                        new
                        {
                            Id = 15,
                            Name = "PS_2"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Thunderbolt_3"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Thunderbolt_4"
                        });
                });

            modelBuilder.Entity("VueBase.Models.FanBearing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_FanBearing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fluid Dynamic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sleeve"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ball"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hydraulic"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Fans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Fans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 192,
                            Name = "1 x 92mm"
                        },
                        new
                        {
                            Id = 1120,
                            Name = "1 x 120mm"
                        },
                        new
                        {
                            Id = 1140,
                            Name = "1 x 140mm"
                        },
                        new
                        {
                            Id = 2120,
                            Name = "2 x 120mm"
                        },
                        new
                        {
                            Id = 2140,
                            Name = "2 x 140mm"
                        });
                });

            modelBuilder.Entity("VueBase.Models.FanSpeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_FanSpeed");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "up to 1500 RPM"
                        },
                        new
                        {
                            Id = 3,
                            Name = "600 - 1500 RPM"
                        },
                        new
                        {
                            Id = 4,
                            Name = "500 - 2000 RPM"
                        });
                });

            modelBuilder.Entity("VueBase.Models.FormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_FormFactor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ATX"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SFX"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Inch_2_5"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Inch_3_5"
                        });
                });

            modelBuilder.Entity("VueBase.Models.GPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BaseClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BoostClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CUDAProcessors")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetID")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetProducerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InterfaceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxMonitors")
                        .HasColumnType("int");

                    b.Property<decimal>("MemoryBandwith")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemoryBusId")
                        .HasColumnType("int");

                    b.Property<decimal>("MemoryFrequency")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MemoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConnectorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedPSUWattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ResolutionID")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ChipsetID");

                    b.HasIndex("ChipsetProducerId");

                    b.HasIndex("InterfaceTypeId");

                    b.HasIndex("MemoryBusId");

                    b.HasIndex("MemoryId");

                    b.HasIndex("MemoryTypeId");

                    b.HasIndex("PowerConnectorID");

                    b.HasIndex("ProducerID");

                    b.HasIndex("ResolutionID");

                    b.ToTable("GPU");
                });

            modelBuilder.Entity("VueBase.Models.GPUChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Chipset");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GeForce_RTX_4070_Ti"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GeForce_RTX_4080"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radeon_RX_7600"
                        });
                });

            modelBuilder.Entity("VueBase.Models.HDD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CacheId")
                        .HasColumnType("int");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InterfaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int>("RPMId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CacheId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("ProducerID");

                    b.HasIndex("RPMId");

                    b.ToTable("HDD");
                });

            modelBuilder.Entity("VueBase.Models.HeatPipes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_HeatPipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 16,
                            Name = "1 x 6mm"
                        },
                        new
                        {
                            Id = 18,
                            Name = "1 x 8mm"
                        },
                        new
                        {
                            Id = 26,
                            Name = "2 x 6mm"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Heatsink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Heatsink");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "No"
                        });
                });

            modelBuilder.Entity("VueBase.Models.InterfaceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_InterfaceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PCIExpress4_0x16"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PCI"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SATA_I"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SATA_II"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SATA_III"
                        },
                        new
                        {
                            Id = 7,
                            Name = "M_2"
                        });
                });

            modelBuilder.Entity("VueBase.Models.InternalConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_InternalConnector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SATA_III"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M_2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PCIe_3_0x16"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PCIe_3_0x1"
                        },
                        new
                        {
                            Id = 6,
                            Name = "PCIe_4_0x16"
                        },
                        new
                        {
                            Id = 7,
                            Name = "PCIe_4_0x1"
                        },
                        new
                        {
                            Id = 8,
                            Name = "USB_2_0"
                        },
                        new
                        {
                            Id = 9,
                            Name = "USB_3_2_Gen_1"
                        },
                        new
                        {
                            Id = 10,
                            Name = "USB_3_2_Gen_2"
                        });
                });

            modelBuilder.Entity("VueBase.Models.InternalGPUSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_InternalGPUSupport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "No"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Material");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aluminium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Copper"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nickel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "NickelPlatedCopper"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Plastic"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Glass"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Mesh"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryBus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryBus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Bit_64"
                        },
                        new
                        {
                            Id = 128,
                            Name = "Bit_128"
                        },
                        new
                        {
                            Id = 192,
                            Name = "Bit_192"
                        },
                        new
                        {
                            Id = 256,
                            Name = "Bit_256"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryChannel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Single"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dual"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Quad"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryFrequency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MHz_2133"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MHz_2400"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MHz_2666"
                        },
                        new
                        {
                            Id = 5,
                            Name = "MHz_2800"
                        },
                        new
                        {
                            Id = 6,
                            Name = "MHz_3000"
                        },
                        new
                        {
                            Id = 7,
                            Name = "MHz_3200"
                        },
                        new
                        {
                            Id = 8,
                            Name = "MHz_3600"
                        },
                        new
                        {
                            Id = 9,
                            Name = "MHz_4000"
                        },
                        new
                        {
                            Id = 10,
                            Name = "MHz_4266"
                        },
                        new
                        {
                            Id = 11,
                            Name = "MHz_4400"
                        },
                        new
                        {
                            Id = 12,
                            Name = "MHz_4600"
                        },
                        new
                        {
                            Id = 13,
                            Name = "MHz_4800"
                        },
                        new
                        {
                            Id = 14,
                            Name = "MHz_5000"
                        },
                        new
                        {
                            Id = 15,
                            Name = "MHz_5200"
                        },
                        new
                        {
                            Id = 16,
                            Name = "MHz_5333"
                        },
                        new
                        {
                            Id = 17,
                            Name = "MHz_5600"
                        },
                        new
                        {
                            Id = 18,
                            Name = "MHz_5800"
                        },
                        new
                        {
                            Id = 19,
                            Name = "MHz_6000"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemorySlots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemorySlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DIMM_2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DIMM_4"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SODIMM_2"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DDR4"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GDDR5"
                        },
                        new
                        {
                            Id = 4,
                            Name = "GDDR6"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HBM"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryTypeFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryTypeFrequency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DDR4_2133"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DDR4_2400"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DDR4_2666"
                        },
                        new
                        {
                            Id = 5,
                            Name = "DDR4_2800"
                        },
                        new
                        {
                            Id = 6,
                            Name = "DDR4_3000"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Modular", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Modular");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fully_Modular"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Semi_Modular"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Not_Modular"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Motherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CPUFamilyId")
                        .HasColumnType("int");

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InternalGPUSupportId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxMemoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CPUFamilyId");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("ChipsetId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("InternalGPUSupportId");

                    b.HasIndex("MaxMemoryId");

                    b.HasIndex("MemoryChannelId");

                    b.HasIndex("ProducerID");

                    b.ToTable("Motherboard");
                });

            modelBuilder.Entity("VueBase.Models.MotherboardChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MotherboardChipset");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B450"
                        },
                        new
                        {
                            Id = 3,
                            Name = "B550"
                        },
                        new
                        {
                            Id = 4,
                            Name = "B760"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Mount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Mount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Horizontal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vertical"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MTBF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MTBF");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 25000,
                            Name = "25 000 h"
                        },
                        new
                        {
                            Id = 30000,
                            Name = "30 000 h"
                        },
                        new
                        {
                            Id = 40000,
                            Name = "40 000 h"
                        },
                        new
                        {
                            Id = 50000,
                            Name = "50 000 h"
                        },
                        new
                        {
                            Id = 60000,
                            Name = "60 000 h"
                        },
                        new
                        {
                            Id = 70000,
                            Name = "70 000 h"
                        },
                        new
                        {
                            Id = 73500,
                            Name = "73 500 h"
                        },
                        new
                        {
                            Id = 80000,
                            Name = "80 000 h"
                        },
                        new
                        {
                            Id = 90000,
                            Name = "90 000 h"
                        },
                        new
                        {
                            Id = 100000,
                            Name = "100 000 h"
                        },
                        new
                        {
                            Id = 110000,
                            Name = "110 000 h"
                        },
                        new
                        {
                            Id = 120000,
                            Name = "120 000 h"
                        },
                        new
                        {
                            Id = 150000,
                            Name = "150 000 h"
                        },
                        new
                        {
                            Id = 160000,
                            Name = "160 000 h"
                        },
                        new
                        {
                            Id = 300000,
                            Name = "300 000 h"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Overclocking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Overclocking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AMD EXPO"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intel XMP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Intel XMP 2.0"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Intel XMP 3.0"
                        });
                });

            modelBuilder.Entity("VueBase.Models.PFC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_PFC");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Actove"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Ports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Ports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HDMI"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DP"
                        });
                });

            modelBuilder.Entity("VueBase.Models.PowerConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_PowerConnector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pin_6"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pin_8"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Pin_16"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Producers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AMD"
                        });
                });

            modelBuilder.Entity("VueBase.Models.ProtectionFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_ProtectionFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OVP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UVP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SCP"
                        },
                        new
                        {
                            Id = 5,
                            Name = "OLP"
                        });
                });

            modelBuilder.Entity("VueBase.Models.PSU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CoolingId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ModularId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PFCId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoolingId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("ModularId");

                    b.HasIndex("PFCId");

                    b.HasIndex("ProducerID");

                    b.HasIndex("RatingId");

                    b.ToTable("PSU");
                });

            modelBuilder.Entity("VueBase.Models.RAID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_RAID");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "RAID_0"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RAID_1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RAID_5"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RAID_10"
                        });
                });

            modelBuilder.Entity("VueBase.Models.RAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectorTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CoolingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CycleLatencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemoryChannelId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OverclockingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int>("RAMModulesId")
                        .HasColumnType("int");

                    b.Property<int>("VoltageId")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorTypeId");

                    b.HasIndex("CoolingTypeId");

                    b.HasIndex("CycleLatencyId");

                    b.HasIndex("MemoryChannelId");

                    b.HasIndex("MemoryFrequencyId");

                    b.HasIndex("MemoryId");

                    b.HasIndex("MemoryTypeId");

                    b.HasIndex("OverclockingId");

                    b.HasIndex("ProducerID");

                    b.HasIndex("RAMModulesId");

                    b.HasIndex("VoltageId");

                    b.ToTable("RAM");
                });

            modelBuilder.Entity("VueBase.Models.RAMModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_RAMModules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Eight"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Plus"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Plus_Bronze"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Plus_Silver"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Plus_Gold"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Plus_Platinum"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Plus_Titanium"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Resolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Resolution");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 720,
                            Name = "HD"
                        },
                        new
                        {
                            Id = 1080,
                            Name = "Full_HD"
                        },
                        new
                        {
                            Id = 1440,
                            Name = "Quad_HD"
                        },
                        new
                        {
                            Id = 2160,
                            Name = "Ultra_HD"
                        });
                });

            modelBuilder.Entity("VueBase.Models.RPM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_RPM");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 5400,
                            Name = "RPM_5400"
                        },
                        new
                        {
                            Id = 7200,
                            Name = "RPM_7200"
                        },
                        new
                        {
                            Id = 10000,
                            Name = "RPM_10000"
                        });
                });

            modelBuilder.Entity("VueBase.Models.SSD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CacheId")
                        .HasColumnType("int");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int");

                    b.Property<int>("CellTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EncryptionId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<int>("HeatsinkId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InterfaceId")
                        .HasColumnType("int");

                    b.Property<int>("KeyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MTBFId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<decimal>("RandomRead")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RandomWrite")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReadSpeed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TBW")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WriteSpeed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CacheId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("CellTypeId");

                    b.HasIndex("EncryptionId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("HeatsinkId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("KeyId");

                    b.HasIndex("MTBFId");

                    b.HasIndex("ProducerID");

                    b.ToTable("SSD");
                });

            modelBuilder.Entity("VueBase.Models.SSDKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Key");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "A"
                        },
                        new
                        {
                            Id = 3,
                            Name = "B"
                        },
                        new
                        {
                            Id = 4,
                            Name = "C"
                        },
                        new
                        {
                            Id = 5,
                            Name = "D"
                        },
                        new
                        {
                            Id = 6,
                            Name = "E"
                        },
                        new
                        {
                            Id = 7,
                            Name = "F"
                        },
                        new
                        {
                            Id = 8,
                            Name = "G"
                        },
                        new
                        {
                            Id = 9,
                            Name = "H"
                        },
                        new
                        {
                            Id = 10,
                            Name = "I"
                        },
                        new
                        {
                            Id = 11,
                            Name = "J"
                        },
                        new
                        {
                            Id = 12,
                            Name = "K"
                        },
                        new
                        {
                            Id = 13,
                            Name = "L"
                        },
                        new
                        {
                            Id = 14,
                            Name = "M"
                        });
                });

            modelBuilder.Entity("VueBase.Models.TDP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_TDP");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 65,
                            Name = "65 W"
                        },
                        new
                        {
                            Id = 70,
                            Name = "70 W"
                        },
                        new
                        {
                            Id = 85,
                            Name = "85 W"
                        },
                        new
                        {
                            Id = 95,
                            Name = "95 W"
                        },
                        new
                        {
                            Id = 100,
                            Name = "100 W"
                        },
                        new
                        {
                            Id = 110,
                            Name = "110 W"
                        },
                        new
                        {
                            Id = 120,
                            Name = "120 W"
                        },
                        new
                        {
                            Id = 130,
                            Name = "130 W"
                        },
                        new
                        {
                            Id = 140,
                            Name = "140 W"
                        },
                        new
                        {
                            Id = 150,
                            Name = "150 W"
                        },
                        new
                        {
                            Id = 160,
                            Name = "160 W"
                        },
                        new
                        {
                            Id = 170,
                            Name = "170 W"
                        },
                        new
                        {
                            Id = 180,
                            Name = "180 W"
                        },
                        new
                        {
                            Id = 190,
                            Name = "190 W"
                        },
                        new
                        {
                            Id = 200,
                            Name = "200 W"
                        },
                        new
                        {
                            Id = 210,
                            Name = "210 W"
                        },
                        new
                        {
                            Id = 220,
                            Name = "220 W"
                        },
                        new
                        {
                            Id = 230,
                            Name = "230 W"
                        },
                        new
                        {
                            Id = 240,
                            Name = "240 W"
                        },
                        new
                        {
                            Id = 250,
                            Name = "250 W"
                        },
                        new
                        {
                            Id = 260,
                            Name = "260 W"
                        },
                        new
                        {
                            Id = 270,
                            Name = "270 W"
                        },
                        new
                        {
                            Id = 280,
                            Name = "280 W"
                        },
                        new
                        {
                            Id = 290,
                            Name = "290 W"
                        },
                        new
                        {
                            Id = 300,
                            Name = "300 W"
                        },
                        new
                        {
                            Id = 400,
                            Name = "400 W"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Voltage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Voltage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 110,
                            Name = "1.1 V"
                        },
                        new
                        {
                            Id = 120,
                            Name = "1.2 V"
                        },
                        new
                        {
                            Id = 125,
                            Name = "1.25 V"
                        },
                        new
                        {
                            Id = 130,
                            Name = "1.3 V"
                        },
                        new
                        {
                            Id = 135,
                            Name = "1.35 V"
                        },
                        new
                        {
                            Id = 140,
                            Name = "1.4 V"
                        },
                        new
                        {
                            Id = 145,
                            Name = "1.45 V"
                        },
                        new
                        {
                            Id = 150,
                            Name = "1.5 V"
                        },
                        new
                        {
                            Id = 155,
                            Name = "1.55 V"
                        },
                        new
                        {
                            Id = 160,
                            Name = "1.6 V"
                        },
                        new
                        {
                            Id = 165,
                            Name = "1.65 V"
                        },
                        new
                        {
                            Id = 170,
                            Name = "1.7 V"
                        },
                        new
                        {
                            Id = 175,
                            Name = "1.75 V"
                        },
                        new
                        {
                            Id = 180,
                            Name = "1.8 V"
                        },
                        new
                        {
                            Id = 190,
                            Name = "1.9 V"
                        },
                        new
                        {
                            Id = 250,
                            Name = "2.5 V"
                        },
                        new
                        {
                            Id = 260,
                            Name = "2.6 V"
                        });
                });

            modelBuilder.Entity("VueBase.Models.WirelessTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_WirelessTechnology");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WiFi_4"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WiFi_5"
                        },
                        new
                        {
                            Id = 4,
                            Name = "WiFi_6"
                        },
                        new
                        {
                            Id = 5,
                            Name = "WiFi_6E"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bluetooth_4_0"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bluetooth_4_2"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bluetooth_5_0"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Bluetooth_5_1"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bluetooth_5_2"
                        });
                });

            modelBuilder.Entity("Join_Case_Buttons", b =>
                {
                    b.HasOne("VueBase.Models.Buttons", null)
                        .WithMany()
                        .HasForeignKey("ButtonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_Color", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_DriveBay", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.DriveBay", null)
                        .WithMany()
                        .HasForeignKey("DriveBayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_FormFactor", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", null)
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_Material", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_Port", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.ExternalConnector", null)
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_PSUMount", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", null)
                        .WithMany()
                        .HasForeignKey("PSUMountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CaseCooler_Color", b =>
                {
                    b.HasOne("VueBase.Models.CaseCooler", null)
                        .WithMany()
                        .HasForeignKey("CaseCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPU_Color", b =>
                {
                    b.HasOne("VueBase.Models.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPU_MemoryTypeFrequency", b =>
                {
                    b.HasOne("VueBase.Models.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryTypeFrequency", null)
                        .WithMany()
                        .HasForeignKey("MemoryTypeFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPU_MotherboardChipset", b =>
                {
                    b.HasOne("VueBase.Models.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MotherboardChipset", null)
                        .WithMany()
                        .HasForeignKey("MotherboardChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPUCooler_Color", b =>
                {
                    b.HasOne("VueBase.Models.CPUCooler", null)
                        .WithMany()
                        .HasForeignKey("CPUCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPUCooler_Material", b =>
                {
                    b.HasOne("VueBase.Models.CPUCooler", null)
                        .WithMany()
                        .HasForeignKey("CPUCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_GPU_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.GPU", null)
                        .WithMany()
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_GPU_Port", b =>
                {
                    b.HasOne("VueBase.Models.GPU", null)
                        .WithMany()
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Ports", null)
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_HDD_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.HDD", null)
                        .WithMany()
                        .HasForeignKey("HDDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_ExternalConnector", b =>
                {
                    b.HasOne("VueBase.Models.ExternalConnector", null)
                        .WithMany()
                        .HasForeignKey("ExternalConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_InternalConnector", b =>
                {
                    b.HasOne("VueBase.Models.InternalConnector", null)
                        .WithMany()
                        .HasForeignKey("InternalConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_MemoryFrequency", b =>
                {
                    b.HasOne("VueBase.Models.MemoryFrequency", null)
                        .WithMany()
                        .HasForeignKey("MemoryFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_MemorySlots", b =>
                {
                    b.HasOne("VueBase.Models.MemorySlots", null)
                        .WithMany()
                        .HasForeignKey("MemorySlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_RAID", b =>
                {
                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.RAID", null)
                        .WithMany()
                        .HasForeignKey("RAIDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_WirelessTechnology", b =>
                {
                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.WirelessTechnology", null)
                        .WithMany()
                        .HasForeignKey("WirelessTechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSU_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSU_Connector", b =>
                {
                    b.HasOne("VueBase.Models.Connectors", null)
                        .WithMany()
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSU_ProtectionFeatures", b =>
                {
                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.ProtectionFeatures", null)
                        .WithMany()
                        .HasForeignKey("ProtectionFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_RAM_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.RAM", null)
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_SSD_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.SSD", null)
                        .WithMany()
                        .HasForeignKey("SSDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VueBase.Models.Case", b =>
                {
                    b.HasOne("VueBase.Models.Fans", "FanBays")
                        .WithMany()
                        .HasForeignKey("FanBaysId");

                    b.HasOne("VueBase.Models.Fans", "InstalledFans")
                        .WithMany()
                        .HasForeignKey("InstalledFansId");

                    b.HasOne("VueBase.Models.PSU", "PSU")
                        .WithMany()
                        .HasForeignKey("PSUId");

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.Material", "SidePanelMaterial")
                        .WithMany()
                        .HasForeignKey("SidePanelMaterialId");

                    b.HasOne("VueBase.Models.CaseType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Fans", "WaterCoolingSlots")
                        .WithMany()
                        .HasForeignKey("WaterCoolingSlotsId");

                    b.Navigation("FanBays");

                    b.Navigation("InstalledFans");

                    b.Navigation("PSU");

                    b.Navigation("Producer");

                    b.Navigation("SidePanelMaterial");

                    b.Navigation("Type");

                    b.Navigation("WaterCoolingSlots");
                });

            modelBuilder.Entity("VueBase.Models.CaseCooler", b =>
                {
                    b.HasOne("VueBase.Models.Connectors", "Connectors")
                        .WithMany()
                        .HasForeignKey("ConnectorsId");

                    b.HasOne("VueBase.Models.FanBearing", "FanBearing")
                        .WithMany()
                        .HasForeignKey("FanBearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FanSpeed", "FanSpeed")
                        .WithMany()
                        .HasForeignKey("FanSpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Fans", "Fans")
                        .WithMany()
                        .HasForeignKey("FansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MTBF", "MTBF")
                        .WithMany()
                        .HasForeignKey("MTBFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.Navigation("Connectors");

                    b.Navigation("FanBearing");

                    b.Navigation("FanSpeed");

                    b.Navigation("Fans");

                    b.Navigation("MTBF");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.CPU", b =>
                {
                    b.HasOne("VueBase.Models.Architecture", "Architecture")
                        .WithMany()
                        .HasForeignKey("ArchitectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Cache", "CacheL1")
                        .WithMany()
                        .HasForeignKey("CacheL1Id");

                    b.HasOne("VueBase.Models.Cache", "CacheL2")
                        .WithMany()
                        .HasForeignKey("CacheL2Id");

                    b.HasOne("VueBase.Models.Cache", "CacheL3")
                        .WithMany()
                        .HasForeignKey("CacheL3Id");

                    b.HasOne("VueBase.Models.DataWidth", "DataWidth")
                        .WithMany()
                        .HasForeignKey("DataWidthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.GPU", "InternalGPU")
                        .WithMany()
                        .HasForeignKey("InternalGPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "MaxMemory")
                        .WithMany()
                        .HasForeignKey("MaxMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.Navigation("Architecture");

                    b.Navigation("CPUSocket");

                    b.Navigation("CacheL1");

                    b.Navigation("CacheL2");

                    b.Navigation("CacheL3");

                    b.Navigation("DataWidth");

                    b.Navigation("InternalGPU");

                    b.Navigation("MaxMemory");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.CPUCooler", b =>
                {
                    b.HasOne("VueBase.Models.Connectors", "Connectors")
                        .WithMany()
                        .HasForeignKey("ConnectorsId");

                    b.HasOne("VueBase.Models.CoolingType", "CoolingType")
                        .WithMany()
                        .HasForeignKey("CoolingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FanBearing", "FanBearing")
                        .WithMany()
                        .HasForeignKey("FanBearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FanSpeed", "FanSpeed")
                        .WithMany()
                        .HasForeignKey("FanSpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Fans", "Fans")
                        .WithMany()
                        .HasForeignKey("FansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.HeatPipes", "HeatPipes")
                        .WithMany()
                        .HasForeignKey("HeatPipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MTBF", "MTBF")
                        .WithMany()
                        .HasForeignKey("MTBFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Mount", "Mount")
                        .WithMany()
                        .HasForeignKey("MountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.CPUSocket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connectors");

                    b.Navigation("CoolingType");

                    b.Navigation("FanBearing");

                    b.Navigation("FanSpeed");

                    b.Navigation("Fans");

                    b.Navigation("HeatPipes");

                    b.Navigation("MTBF");

                    b.Navigation("Mount");

                    b.Navigation("Producer");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("VueBase.Models.GPU", b =>
                {
                    b.HasOne("VueBase.Models.GPUChipset", "Chipset")
                        .WithMany()
                        .HasForeignKey("ChipsetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "ChipsetProducer")
                        .WithMany()
                        .HasForeignKey("ChipsetProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InterfaceTypes", "InterfaceType")
                        .WithMany()
                        .HasForeignKey("InterfaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryBus", "MemoryBus")
                        .WithMany()
                        .HasForeignKey("MemoryBusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Memory")
                        .WithMany()
                        .HasForeignKey("MemoryId");

                    b.HasOne("VueBase.Models.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PowerConnector", "PowerConnector")
                        .WithMany()
                        .HasForeignKey("PowerConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.Resolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chipset");

                    b.Navigation("ChipsetProducer");

                    b.Navigation("InterfaceType");

                    b.Navigation("Memory");

                    b.Navigation("MemoryBus");

                    b.Navigation("MemoryType");

                    b.Navigation("PowerConnector");

                    b.Navigation("Producer");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("VueBase.Models.HDD", b =>
                {
                    b.HasOne("VueBase.Models.Cache", "Cache")
                        .WithMany()
                        .HasForeignKey("CacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InterfaceTypes", "Interface")
                        .WithMany()
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.RPM", "RPM")
                        .WithMany()
                        .HasForeignKey("RPMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cache");

                    b.Navigation("Capacity");

                    b.Navigation("FormFactor");

                    b.Navigation("Interface");

                    b.Navigation("Producer");

                    b.Navigation("RPM");
                });

            modelBuilder.Entity("VueBase.Models.Motherboard", b =>
                {
                    b.HasOne("VueBase.Models.CPUFamily", "CPUFamily")
                        .WithMany()
                        .HasForeignKey("CPUFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MotherboardChipset", "Chipset")
                        .WithMany()
                        .HasForeignKey("ChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InternalGPUSupport", "InternalGPUSupport")
                        .WithMany()
                        .HasForeignKey("InternalGPUSupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "MaxMemory")
                        .WithMany()
                        .HasForeignKey("MaxMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryChannel", "MemoryChannel")
                        .WithMany()
                        .HasForeignKey("MemoryChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.Navigation("CPUFamily");

                    b.Navigation("CPUSocket");

                    b.Navigation("Chipset");

                    b.Navigation("FormFactor");

                    b.Navigation("InternalGPUSupport");

                    b.Navigation("MaxMemory");

                    b.Navigation("MemoryChannel");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.PSU", b =>
                {
                    b.HasOne("VueBase.Models.Cooling", "Cooling")
                        .WithMany()
                        .HasForeignKey("CoolingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Modular", "Modular")
                        .WithMany()
                        .HasForeignKey("ModularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PFC", "PFC")
                        .WithMany()
                        .HasForeignKey("PFCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cooling");

                    b.Navigation("FormFactor");

                    b.Navigation("Modular");

                    b.Navigation("PFC");

                    b.Navigation("Producer");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("VueBase.Models.RAM", b =>
                {
                    b.HasOne("VueBase.Models.MemorySlots", "ConnectorType")
                        .WithMany()
                        .HasForeignKey("ConnectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CoolingType", "CoolingType")
                        .WithMany()
                        .HasForeignKey("CoolingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CycleLatency", "CycleLatency")
                        .WithMany()
                        .HasForeignKey("CycleLatencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryChannel", "MemoryChannel")
                        .WithMany()
                        .HasForeignKey("MemoryChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryFrequency", "MemoryFrequency")
                        .WithMany()
                        .HasForeignKey("MemoryFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Memory")
                        .WithMany()
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Overclocking", "Overclocking")
                        .WithMany()
                        .HasForeignKey("OverclockingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.RAMModules", "RAMModules")
                        .WithMany()
                        .HasForeignKey("RAMModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectorType");

                    b.Navigation("CoolingType");

                    b.Navigation("CycleLatency");

                    b.Navigation("Memory");

                    b.Navigation("MemoryChannel");

                    b.Navigation("MemoryFrequency");

                    b.Navigation("MemoryType");

                    b.Navigation("Overclocking");

                    b.Navigation("Producer");

                    b.Navigation("RAMModules");

                    b.Navigation("Voltage");
                });

            modelBuilder.Entity("VueBase.Models.SSD", b =>
                {
                    b.HasOne("VueBase.Models.Cache", "Cache")
                        .WithMany()
                        .HasForeignKey("CacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CellType", "CellType")
                        .WithMany()
                        .HasForeignKey("CellTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Encryption", "Encryption")
                        .WithMany()
                        .HasForeignKey("EncryptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Heatsink", "Heatsink")
                        .WithMany()
                        .HasForeignKey("HeatsinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InterfaceTypes", "Interface")
                        .WithMany()
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.SSDKey", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MTBF", "MTBF")
                        .WithMany()
                        .HasForeignKey("MTBFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.Navigation("Cache");

                    b.Navigation("Capacity");

                    b.Navigation("CellType");

                    b.Navigation("Encryption");

                    b.Navigation("FormFactor");

                    b.Navigation("Heatsink");

                    b.Navigation("Interface");

                    b.Navigation("Key");

                    b.Navigation("MTBF");

                    b.Navigation("Producer");
                });
#pragma warning restore 612, 618
        }
    }
}
