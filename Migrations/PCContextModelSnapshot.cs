// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VueBase.Data;

#nullable disable

namespace VueBase.Migrations
{
    [DbContext(typeof(PCContext))]
    partial class PCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Join_Case_Buttons", b =>
                {
                    b.Property<int>("ButtonsId")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.HasKey("ButtonsId", "CaseId");

                    b.HasIndex("CaseId");

                    b.ToTable("Join_Case_Buttons");
                });

            modelBuilder.Entity("Join_Case_Color", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("Join_Case_Color");
                });

            modelBuilder.Entity("Join_Case_DriveBay", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("DriveBayId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "DriveBayId");

                    b.HasIndex("DriveBayId");

                    b.ToTable("Join_Case_DriveBay");
                });

            modelBuilder.Entity("Join_Case_FanBays", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("FanBaysId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "FanBaysId");

                    b.HasIndex("FanBaysId");

                    b.ToTable("Join_Case_FanBays");
                });

            modelBuilder.Entity("Join_Case_FormFactor", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "FormFactorId");

                    b.HasIndex("FormFactorId");

                    b.ToTable("Join_Case_FormFactor");
                });

            modelBuilder.Entity("Join_Case_InstalledFans", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("InstalledFansId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "InstalledFansId");

                    b.HasIndex("InstalledFansId");

                    b.ToTable("Join_Case_InstalledFans");
                });

            modelBuilder.Entity("Join_Case_Material", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Join_Case_Material");
                });

            modelBuilder.Entity("Join_Case_Port", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "PortId");

                    b.HasIndex("PortId");

                    b.ToTable("Join_Case_Port");
                });

            modelBuilder.Entity("Join_Case_PSUMount", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("PSUMountId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "PSUMountId");

                    b.HasIndex("PSUMountId");

                    b.ToTable("Join_Case_PSUMount");
                });

            modelBuilder.Entity("Join_Case_WaterCoolingSlots", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("WaterCoolingSlotId")
                        .HasColumnType("int");

                    b.HasKey("CaseId", "WaterCoolingSlotId");

                    b.HasIndex("WaterCoolingSlotId");

                    b.ToTable("Join_Case_WaterCoolingSlots");
                });

            modelBuilder.Entity("Join_CaseCooler_Color", b =>
                {
                    b.Property<int>("CaseCoolerId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("CaseCoolerId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("Join_CaseCooler_Color");
                });

            modelBuilder.Entity("Join_CPU_MemoryTypeFrequency", b =>
                {
                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeFrequencyId")
                        .HasColumnType("int");

                    b.HasKey("CPUId", "MemoryTypeFrequencyId");

                    b.HasIndex("MemoryTypeFrequencyId");

                    b.ToTable("Join_CPU_MemoryTypeFrequency");
                });

            modelBuilder.Entity("Join_CPU_MotherboardChipset", b =>
                {
                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardChipsetId")
                        .HasColumnType("int");

                    b.HasKey("CPUId", "MotherboardChipsetId");

                    b.HasIndex("MotherboardChipsetId");

                    b.ToTable("Join_CPU_MotherboardChipset");
                });

            modelBuilder.Entity("Join_CPUCooler_Color", b =>
                {
                    b.Property<int>("CPUCoolerId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("CPUCoolerId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("Join_CPUCooler_Color");
                });

            modelBuilder.Entity("Join_CPUCooler_CPUSocket", b =>
                {
                    b.Property<int>("CPUCoolerId")
                        .HasColumnType("int");

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.HasKey("CPUCoolerId", "CPUSocketId");

                    b.HasIndex("CPUSocketId");

                    b.ToTable("Join_CPUCooler_CPUSocket");
                });

            modelBuilder.Entity("Join_CPUCooler_Material", b =>
                {
                    b.Property<int>("CPUCoolerId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("CPUCoolerId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Join_CPUCooler_Material");
                });

            modelBuilder.Entity("Join_GPU_Port", b =>
                {
                    b.Property<int>("GPUId")
                        .HasColumnType("int");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.HasKey("GPUId", "PortId");

                    b.HasIndex("PortId");

                    b.ToTable("Join_GPU_Port");
                });

            modelBuilder.Entity("Join_Motherboard_ExternalConnector", b =>
                {
                    b.Property<int>("ExternalConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("ExternalConnectorId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_Motherboard_ExternalConnector");
                });

            modelBuilder.Entity("Join_Motherboard_InternalConnector", b =>
                {
                    b.Property<int>("InternalConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("InternalConnectorId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_Motherboard_InternalConnector");
                });

            modelBuilder.Entity("Join_Motherboard_MemoryFrequency", b =>
                {
                    b.Property<int>("MemoryFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("MemoryFrequencyId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_Motherboard_MemoryFrequency");
                });

            modelBuilder.Entity("Join_Motherboard_RAID", b =>
                {
                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<int>("RAIDId")
                        .HasColumnType("int");

                    b.HasKey("MotherboardId", "RAIDId");

                    b.HasIndex("RAIDId");

                    b.ToTable("Join_Motherboard_RAID");
                });

            modelBuilder.Entity("Join_Motherboard_WirelessTechnology", b =>
                {
                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<int>("WirelessTechnologyId")
                        .HasColumnType("int");

                    b.HasKey("MotherboardId", "WirelessTechnologyId");

                    b.HasIndex("WirelessTechnologyId");

                    b.ToTable("Join_Motherboard_WirelessTechnology");
                });

            modelBuilder.Entity("Join_PSU_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "PSUId");

                    b.HasIndex("PSUId");

                    b.ToTable("Join_PSU_Color");
                });

            modelBuilder.Entity("Join_PSU_Connector", b =>
                {
                    b.Property<int>("ConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.HasKey("ConnectorId", "PSUId");

                    b.HasIndex("PSUId");

                    b.ToTable("Join_PSU_Connector");
                });

            modelBuilder.Entity("Join_PSU_ProtectionFeatures", b =>
                {
                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.Property<int>("ProtectionFeaturesId")
                        .HasColumnType("int");

                    b.HasKey("PSUId", "ProtectionFeaturesId");

                    b.HasIndex("ProtectionFeaturesId");

                    b.ToTable("Join_PSU_ProtectionFeatures");
                });

            modelBuilder.Entity("Join_RAM_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("RAMId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "RAMId");

                    b.HasIndex("RAMId");

                    b.ToTable("Join_RAM_Color");
                });

            modelBuilder.Entity("Join_RAM_Overclocking", b =>
                {
                    b.Property<int>("OverclockingId")
                        .HasColumnType("int");

                    b.Property<int>("RAMId")
                        .HasColumnType("int");

                    b.HasKey("OverclockingId", "RAMId");

                    b.HasIndex("RAMId");

                    b.ToTable("Join_RAM_Overclocking");
                });

            modelBuilder.Entity("Join_SSD_Color", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("SSDId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "SSDId");

                    b.HasIndex("SSDId");

                    b.ToTable("Join_SSD_Color");
                });

            modelBuilder.Entity("VueBase.Models.Buttons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Buttons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Power"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reset"
                        },
                        new
                        {
                            Id = 4,
                            Name = "LED Control"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RGB Control"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Cache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Cache");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 16,
                            Name = "16 KB"
                        },
                        new
                        {
                            Id = 32,
                            Name = "32 KB"
                        },
                        new
                        {
                            Id = 64,
                            Name = "64 KB"
                        },
                        new
                        {
                            Id = 128,
                            Name = "128 KB"
                        },
                        new
                        {
                            Id = 256,
                            Name = "256 KB"
                        },
                        new
                        {
                            Id = 384,
                            Name = "384 KB"
                        },
                        new
                        {
                            Id = 512,
                            Name = "512 KB"
                        },
                        new
                        {
                            Id = 640,
                            Name = "640 KB"
                        },
                        new
                        {
                            Id = 1024,
                            Name = "1 MB"
                        },
                        new
                        {
                            Id = 2048,
                            Name = "2 MB"
                        },
                        new
                        {
                            Id = 3072,
                            Name = "3 MB"
                        },
                        new
                        {
                            Id = 4096,
                            Name = "4 MB"
                        },
                        new
                        {
                            Id = 6144,
                            Name = "6 MB"
                        },
                        new
                        {
                            Id = 8192,
                            Name = "8 MB"
                        },
                        new
                        {
                            Id = 8500,
                            Name = "8.5 MB"
                        },
                        new
                        {
                            Id = 9500,
                            Name = "9.5 MB"
                        },
                        new
                        {
                            Id = 12288,
                            Name = "12 MB"
                        },
                        new
                        {
                            Id = 16384,
                            Name = "16 MB"
                        },
                        new
                        {
                            Id = 20480,
                            Name = "20 MB"
                        },
                        new
                        {
                            Id = 24576,
                            Name = "24 MB"
                        },
                        new
                        {
                            Id = 32768,
                            Name = "32 MB"
                        },
                        new
                        {
                            Id = 36864,
                            Name = "36 MB"
                        },
                        new
                        {
                            Id = 49152,
                            Name = "48 MB"
                        },
                        new
                        {
                            Id = 65536,
                            Name = "64 MB"
                        },
                        new
                        {
                            Id = 73728,
                            Name = "72 MB"
                        },
                        new
                        {
                            Id = 98304,
                            Name = "96 MB"
                        },
                        new
                        {
                            Id = 131072,
                            Name = "128 MB"
                        },
                        new
                        {
                            Id = 147456,
                            Name = "144 MB"
                        },
                        new
                        {
                            Id = 196608,
                            Name = "192 MB"
                        },
                        new
                        {
                            Id = 262144,
                            Name = "256 MB"
                        },
                        new
                        {
                            Id = 4194304,
                            Name = "4 GB"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Capacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Capacity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "2 GB"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4 GB"
                        },
                        new
                        {
                            Id = 6,
                            Name = "6 GB"
                        },
                        new
                        {
                            Id = 8,
                            Name = "8 GB"
                        },
                        new
                        {
                            Id = 10,
                            Name = "10 GB"
                        },
                        new
                        {
                            Id = 12,
                            Name = "12 GB"
                        },
                        new
                        {
                            Id = 16,
                            Name = "16 GB"
                        },
                        new
                        {
                            Id = 32,
                            Name = "32 GB"
                        },
                        new
                        {
                            Id = 64,
                            Name = "64 GB"
                        },
                        new
                        {
                            Id = 128,
                            Name = "128 GB"
                        },
                        new
                        {
                            Id = 256,
                            Name = "256 GB"
                        },
                        new
                        {
                            Id = 512,
                            Name = "512 GB"
                        },
                        new
                        {
                            Id = 1000,
                            Name = "1 TB"
                        },
                        new
                        {
                            Id = 2000,
                            Name = "2 TB"
                        },
                        new
                        {
                            Id = 4000,
                            Name = "4 TB"
                        },
                        new
                        {
                            Id = 6000,
                            Name = "6 TB"
                        },
                        new
                        {
                            Id = 8000,
                            Name = "8 TB"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int?>("SidePanelMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.HasIndex("SidePanelMaterialId");

                    b.HasIndex("TypeId");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("VueBase.Models.CaseCooler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectorId")
                        .HasColumnType("int");

                    b.Property<decimal>("FanAirflow")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FanBearingId")
                        .HasColumnType("int");

                    b.Property<decimal>("FanNoiseLevel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FanSpeedId")
                        .HasColumnType("int");

                    b.Property<int>("FansId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MTBFId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("FanBearingId");

                    b.HasIndex("FanSpeedId");

                    b.HasIndex("FansId");

                    b.HasIndex("MTBFId");

                    b.HasIndex("ProducerId");

                    b.ToTable("CaseCooler");
                });

            modelBuilder.Entity("VueBase.Models.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CaseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Full Tower"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mid Tower"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mini Tower"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Small Form Factor"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Big Tower"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CellType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CellType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MLC"
                        },
                        new
                        {
                            Id = 3,
                            Name = "QLC"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SLC"
                        },
                        new
                        {
                            Id = 5,
                            Name = "TLC"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 8,
                            Name = "White"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Gray"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Connector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Connectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PCIe 3.0 x16 x 1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PCIe 4.0 x16 x 1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PCIe 3.0 x8 x 1"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PCIe 4.0 x8 x 1"
                        },
                        new
                        {
                            Id = 8,
                            Name = "USB 2.0 x 1"
                        },
                        new
                        {
                            Id = 9,
                            Name = "USB 2.0 x 2"
                        },
                        new
                        {
                            Id = 10,
                            Name = "USB 2.0 x 3"
                        },
                        new
                        {
                            Id = 11,
                            Name = "USB 2.0 x 4"
                        },
                        new
                        {
                            Id = 12,
                            Name = "USB 3.2 x 1"
                        },
                        new
                        {
                            Id = 13,
                            Name = "USB 3.2 Gen. 1 x 2"
                        },
                        new
                        {
                            Id = 14,
                            Name = "USB 3.2 x 3"
                        },
                        new
                        {
                            Id = 15,
                            Name = "USB 3.2 x 4"
                        },
                        new
                        {
                            Id = 16,
                            Name = "USB 3.2 Gen. 1 Type-C x 1"
                        },
                        new
                        {
                            Id = 17,
                            Name = "USB 3.2 Gen. 1 Type-C x 2"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Microphone x 1"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Headphone x 1"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Microphone/Headphone x 1"
                        },
                        new
                        {
                            Id = 21,
                            Name = "VGA x 1"
                        },
                        new
                        {
                            Id = 22,
                            Name = "DVI x 1"
                        },
                        new
                        {
                            Id = 23,
                            Name = "RJ-45 x 1"
                        },
                        new
                        {
                            Id = 24,
                            Name = "SATA III x 2"
                        },
                        new
                        {
                            Id = 25,
                            Name = "SATA III x 4"
                        },
                        new
                        {
                            Id = 26,
                            Name = "SATA III x 6"
                        },
                        new
                        {
                            Id = 27,
                            Name = "SATA III x 8"
                        },
                        new
                        {
                            Id = 28,
                            Name = "SATA III x 10"
                        },
                        new
                        {
                            Id = 29,
                            Name = "SATA III x 12"
                        },
                        new
                        {
                            Id = 30,
                            Name = "HDMI x 1"
                        },
                        new
                        {
                            Id = 31,
                            Name = "HDMI 2.1 x 1"
                        },
                        new
                        {
                            Id = 32,
                            Name = "HDMI 2.1 x 2"
                        },
                        new
                        {
                            Id = 33,
                            Name = "HDMI 2.1a x 1"
                        },
                        new
                        {
                            Id = 34,
                            Name = "HDMI 2.1a x 2"
                        },
                        new
                        {
                            Id = 35,
                            Name = "DisplayPort x 1"
                        },
                        new
                        {
                            Id = 36,
                            Name = "DisplayPort 1.4 x 1"
                        },
                        new
                        {
                            Id = 37,
                            Name = "DisplayPort 1.4 x 2"
                        },
                        new
                        {
                            Id = 38,
                            Name = "DisplayPort 1.4 x 3"
                        },
                        new
                        {
                            Id = 39,
                            Name = "DisplayPort 1.4 x 4"
                        },
                        new
                        {
                            Id = 40,
                            Name = "DisplayPort 1.4a x 1"
                        },
                        new
                        {
                            Id = 41,
                            Name = "DisplayPort 1.4a x 2"
                        },
                        new
                        {
                            Id = 42,
                            Name = "DisplayPort 1.4a x 3"
                        },
                        new
                        {
                            Id = 43,
                            Name = "DisplayPort 1.4a x 4"
                        },
                        new
                        {
                            Id = 44,
                            Name = "DisplayPort 2.0 x 1"
                        },
                        new
                        {
                            Id = 45,
                            Name = "DisplayPort 2.0 x 2"
                        },
                        new
                        {
                            Id = 46,
                            Name = "DisplayPort 2.0 x 3"
                        },
                        new
                        {
                            Id = 47,
                            Name = "DisplayPort 2.0 x 4"
                        },
                        new
                        {
                            Id = 48,
                            Name = "DisplayPort 2.1 x 1"
                        },
                        new
                        {
                            Id = 49,
                            Name = "DisplayPort 2.1 x 2"
                        },
                        new
                        {
                            Id = 50,
                            Name = "DisplayPort 2.1 x 3"
                        },
                        new
                        {
                            Id = 51,
                            Name = "DisplayPort 2.1 x 4"
                        },
                        new
                        {
                            Id = 52,
                            Name = "CPU 4+4 x 1"
                        },
                        new
                        {
                            Id = 53,
                            Name = "CPU 4+4 x 2"
                        },
                        new
                        {
                            Id = 54,
                            Name = "CPU 4+4 x 3"
                        },
                        new
                        {
                            Id = 55,
                            Name = "CPU 8 x 1"
                        },
                        new
                        {
                            Id = 56,
                            Name = "CPU 8 x 2"
                        },
                        new
                        {
                            Id = 57,
                            Name = "CPU 4 x 1"
                        },
                        new
                        {
                            Id = 61,
                            Name = "PCIe 3.0 x4 NVMe x 1"
                        },
                        new
                        {
                            Id = 62,
                            Name = "PCIe 4.0 x4 NVMe x 1"
                        },
                        new
                        {
                            Id = 63,
                            Name = "USB 3.2 Gen. 2 x 2"
                        },
                        new
                        {
                            Id = 64,
                            Name = "M.2 Gen. 4 x 1"
                        },
                        new
                        {
                            Id = 65,
                            Name = "M.2 Gen. 4 x 2"
                        },
                        new
                        {
                            Id = 66,
                            Name = "M.2 Gen. 3 x 1"
                        },
                        new
                        {
                            Id = 67,
                            Name = "M.2 Gen. 3 x 2"
                        },
                        new
                        {
                            Id = 68,
                            Name = "PCIe 3.0 x1 x 1"
                        },
                        new
                        {
                            Id = 69,
                            Name = "PCIe 3.0 x1 x 2"
                        },
                        new
                        {
                            Id = 70,
                            Name = "FrontPanelAudio"
                        },
                        new
                        {
                            Id = 71,
                            Name = "USB 3.2 Gen. 2 Type-C x 1"
                        },
                        new
                        {
                            Id = 72,
                            Name = "USB 3.2 Gen. 2 Type-C x 2"
                        },
                        new
                        {
                            Id = 73,
                            Name = "USB 3.2 Gen. 2 x 1"
                        },
                        new
                        {
                            Id = 74,
                            Name = "USB 3.2 Gen. 1 x 1"
                        },
                        new
                        {
                            Id = 75,
                            Name = "PS/2 keyboard/mouse x 1"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Audio Jack x 1"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Audio Jack x 2"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Audio Jack x 3"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Audio Jack x 4"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Audio Jack x 5"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Audio Jack x 6"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Audio Jack x 7"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Audio Jack x 8"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Flash BIOS Button x 1"
                        },
                        new
                        {
                            Id = 85,
                            Name = "DisplayPort x 2"
                        },
                        new
                        {
                            Id = 86,
                            Name = "USB 3.2 Gen. 1 x 3"
                        },
                        new
                        {
                            Id = 87,
                            Name = "M.2 PCIe NVMe 4.0 x4 x 2"
                        },
                        new
                        {
                            Id = 88,
                            Name = "M.2 PCIe NVMe 4.0 x4 x 1"
                        },
                        new
                        {
                            Id = 89,
                            Name = "M.2 PCIe NVMe 3.0 x4 x 2"
                        },
                        new
                        {
                            Id = 90,
                            Name = "M.2 PCIe NVMe 3.0 x4 x 1"
                        },
                        new
                        {
                            Id = 91,
                            Name = "ARGB 3-pin x 1"
                        },
                        new
                        {
                            Id = 92,
                            Name = "RGB 4-pin x 1"
                        },
                        new
                        {
                            Id = 93,
                            Name = "ARGB 3-pin x 2"
                        },
                        new
                        {
                            Id = 94,
                            Name = "RGB 4-pin x 2"
                        },
                        new
                        {
                            Id = 95,
                            Name = "ARGB 3-pin x 3"
                        },
                        new
                        {
                            Id = 96,
                            Name = "RGB 4-pin x 3"
                        },
                        new
                        {
                            Id = 97,
                            Name = "COM x 1"
                        },
                        new
                        {
                            Id = 98,
                            Name = "TPM x 1"
                        },
                        new
                        {
                            Id = 99,
                            Name = "LPT x 1"
                        },
                        new
                        {
                            Id = 100,
                            Name = "S/PDIF x 1"
                        },
                        new
                        {
                            Id = 101,
                            Name = "CPU Fan 4-pin x 1"
                        },
                        new
                        {
                            Id = 102,
                            Name = "SYS/CHA Fan x 1"
                        },
                        new
                        {
                            Id = 103,
                            Name = "SYS/CHA Fan x 2"
                        },
                        new
                        {
                            Id = 104,
                            Name = "SYS/CHA Fan x 3"
                        },
                        new
                        {
                            Id = 105,
                            Name = "ATX 24-pin x 1"
                        },
                        new
                        {
                            Id = 106,
                            Name = "ATX 24-pin x 2"
                        },
                        new
                        {
                            Id = 107,
                            Name = "ATX 24-pin x 3"
                        },
                        new
                        {
                            Id = 108,
                            Name = "ATX 24-pin x 4"
                        },
                        new
                        {
                            Id = 109,
                            Name = "ATX 8-pin x 1"
                        },
                        new
                        {
                            Id = 110,
                            Name = "ATX 8-pin x 2"
                        },
                        new
                        {
                            Id = 111,
                            Name = "ATX 8-pin x 3"
                        },
                        new
                        {
                            Id = 112,
                            Name = "ATX 8-pin x 4"
                        },
                        new
                        {
                            Id = 113,
                            Name = "Molex 4-pin x 1"
                        },
                        new
                        {
                            Id = 114,
                            Name = "PCIe 2.0 6+2 (8) x 1"
                        },
                        new
                        {
                            Id = 115,
                            Name = "PCIe 2.0 6+2 (8) x 2"
                        },
                        new
                        {
                            Id = 116,
                            Name = "PCIe 2.0 6+2 (8) x 3"
                        },
                        new
                        {
                            Id = 117,
                            Name = "Molex 4-pin x 2"
                        },
                        new
                        {
                            Id = 118,
                            Name = "Molex 4-pin x 3"
                        },
                        new
                        {
                            Id = 119,
                            Name = "Molex 4-pin x 4"
                        },
                        new
                        {
                            Id = 120,
                            Name = "PCIe 2.0 6+2 (8) x 4"
                        },
                        new
                        {
                            Id = 121,
                            Name = "PCIe 5.0 12+4 (16) x 1"
                        },
                        new
                        {
                            Id = 122,
                            Name = "SATA III x 1"
                        },
                        new
                        {
                            Id = 123,
                            Name = "4-pin PWM x 1"
                        },
                        new
                        {
                            Id = 124,
                            Name = "3-pin x 1"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Cooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Cooling");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "120mm Fan"
                        },
                        new
                        {
                            Id = 3,
                            Name = "135mm Fan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "140mm Fan"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CoolingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CoolingType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Passive"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Water"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Heatsink"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BaseClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BoostClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL1Id")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL2Id")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL3Id")
                        .HasColumnType("int");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<int>("DataWidthId")
                        .HasColumnType("int");

                    b.Property<int>("InternalGPUId")
                        .HasColumnType("int");

                    b.Property<int>("LithographyId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMemoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxWattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemoryChannelId")
                        .HasColumnType("int");

                    b.Property<int>("MicroarchitectureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.Property<bool>("UnlockedMultiplier")
                        .HasColumnType("bit");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("CacheL1Id");

                    b.HasIndex("CacheL2Id");

                    b.HasIndex("CacheL3Id");

                    b.HasIndex("DataWidthId");

                    b.HasIndex("InternalGPUId");

                    b.HasIndex("LithographyId");

                    b.HasIndex("MaxMemoryId");

                    b.HasIndex("MemoryChannelId");

                    b.HasIndex("MicroarchitectureId");

                    b.HasIndex("ProducerId");

                    b.ToTable("CPU");
                });

            modelBuilder.Entity("VueBase.Models.CPUCooler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("CoolingTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("FanAirflow")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FanBearingId")
                        .HasColumnType("int");

                    b.Property<decimal>("FanNoiseLevel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FanSpeedId")
                        .HasColumnType("int");

                    b.Property<int>("FansId")
                        .HasColumnType("int");

                    b.Property<int>("HeatPipesId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MTBFId")
                        .HasColumnType("int");

                    b.Property<int>("MountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int>("TDPId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("CoolingTypeId");

                    b.HasIndex("FanBearingId");

                    b.HasIndex("FanSpeedId");

                    b.HasIndex("FansId");

                    b.HasIndex("HeatPipesId");

                    b.HasIndex("MTBFId");

                    b.HasIndex("MountId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("TDPId");

                    b.ToTable("CPUCooler");
                });

            modelBuilder.Entity("VueBase.Models.CPUFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CPUFamily");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intel"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CPUSocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CPUSocket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "1700"
                        },
                        new
                        {
                            Id = 3,
                            Name = "1200"
                        },
                        new
                        {
                            Id = 4,
                            Name = "1151"
                        },
                        new
                        {
                            Id = 5,
                            Name = "AM5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "AM4"
                        },
                        new
                        {
                            Id = 7,
                            Name = "sTRX4"
                        },
                        new
                        {
                            Id = 8,
                            Name = "sTR4"
                        },
                        new
                        {
                            Id = 9,
                            Name = "FM2+"
                        },
                        new
                        {
                            Id = 10,
                            Name = "FM1"
                        },
                        new
                        {
                            Id = 11,
                            Name = "AM3+"
                        },
                        new
                        {
                            Id = 12,
                            Name = "AM2+"
                        },
                        new
                        {
                            Id = 13,
                            Name = "775"
                        },
                        new
                        {
                            Id = 14,
                            Name = "2011"
                        },
                        new
                        {
                            Id = 15,
                            Name = "2011-3"
                        },
                        new
                        {
                            Id = 16,
                            Name = "2066"
                        },
                        new
                        {
                            Id = 17,
                            Name = "1155"
                        },
                        new
                        {
                            Id = 18,
                            Name = "1156"
                        },
                        new
                        {
                            Id = 19,
                            Name = "1336"
                        },
                        new
                        {
                            Id = 20,
                            Name = "1150"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CycleLatency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CycleLatency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CL2.5"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CL3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CL4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CL5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CL6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CL7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CL8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "CL9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "CL10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "CL11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "CL12"
                        },
                        new
                        {
                            Id = 13,
                            Name = "CL13"
                        },
                        new
                        {
                            Id = 14,
                            Name = "CL14"
                        },
                        new
                        {
                            Id = 15,
                            Name = "CL15"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CL16"
                        },
                        new
                        {
                            Id = 17,
                            Name = "CL17"
                        },
                        new
                        {
                            Id = 18,
                            Name = "CL18"
                        },
                        new
                        {
                            Id = 19,
                            Name = "CL19"
                        },
                        new
                        {
                            Id = 20,
                            Name = "CL20"
                        },
                        new
                        {
                            Id = 21,
                            Name = "CL21"
                        },
                        new
                        {
                            Id = 22,
                            Name = "CL22"
                        },
                        new
                        {
                            Id = 23,
                            Name = "CL23"
                        },
                        new
                        {
                            Id = 24,
                            Name = "CL24"
                        },
                        new
                        {
                            Id = 25,
                            Name = "CL25"
                        },
                        new
                        {
                            Id = 26,
                            Name = "CL26"
                        },
                        new
                        {
                            Id = 27,
                            Name = "CL27"
                        },
                        new
                        {
                            Id = 28,
                            Name = "CL28"
                        },
                        new
                        {
                            Id = 29,
                            Name = "CL29"
                        },
                        new
                        {
                            Id = 30,
                            Name = "CL30"
                        },
                        new
                        {
                            Id = 31,
                            Name = "CL31"
                        },
                        new
                        {
                            Id = 32,
                            Name = "CL32"
                        },
                        new
                        {
                            Id = 33,
                            Name = "CL33"
                        },
                        new
                        {
                            Id = 34,
                            Name = "CL34"
                        },
                        new
                        {
                            Id = 35,
                            Name = "CL35"
                        },
                        new
                        {
                            Id = 36,
                            Name = "CL36"
                        });
                });

            modelBuilder.Entity("VueBase.Models.DataWidth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_DataWidth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 32,
                            Name = "32 bit"
                        },
                        new
                        {
                            Id = 64,
                            Name = "64 bit"
                        });
                });

            modelBuilder.Entity("VueBase.Models.DriveBay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Drivebay");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "1 x 2.5''"
                        },
                        new
                        {
                            Id = 3,
                            Name = "1 x 3.5''"
                        },
                        new
                        {
                            Id = 4,
                            Name = "2 x 2.5''"
                        },
                        new
                        {
                            Id = 5,
                            Name = "2 x 3.5''"
                        },
                        new
                        {
                            Id = 6,
                            Name = "3 x 2.5''"
                        },
                        new
                        {
                            Id = 7,
                            Name = "3 x 3.5''"
                        },
                        new
                        {
                            Id = 8,
                            Name = "4 x 2.5''"
                        },
                        new
                        {
                            Id = 9,
                            Name = "4 x 3.5''"
                        },
                        new
                        {
                            Id = 10,
                            Name = "2 x 3.5''/2.5''"
                        },
                        new
                        {
                            Id = 11,
                            Name = "9 x 2.5''"
                        },
                        new
                        {
                            Id = 12,
                            Name = "5 x 3.5''"
                        },
                        new
                        {
                            Id = 13,
                            Name = "8 x 2.5''"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Encryption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Encryption");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "No"
                        });
                });

            modelBuilder.Entity("VueBase.Models.FanBearing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_FanBearing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fluid Dynamic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sleeve"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ball"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hydraulic"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rifle"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Fans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Fans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "1 x 120 mm (back)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "1 x 120 mm (front)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "1 x 120 mm (top)"
                        },
                        new
                        {
                            Id = 5,
                            Name = "1 x 120 mm (under)"
                        },
                        new
                        {
                            Id = 6,
                            Name = "1 x 120 mm (left)"
                        },
                        new
                        {
                            Id = 7,
                            Name = "1 x 120 mm (right)"
                        },
                        new
                        {
                            Id = 8,
                            Name = "1 x 120 mm"
                        },
                        new
                        {
                            Id = 9,
                            Name = "3 x 120 mm/2 x 140 mm (front)"
                        },
                        new
                        {
                            Id = 10,
                            Name = "2 x 120/140 mm (top)"
                        },
                        new
                        {
                            Id = 11,
                            Name = "2 x 120 mm"
                        },
                        new
                        {
                            Id = 12,
                            Name = "2 x 120 mm (back)"
                        },
                        new
                        {
                            Id = 13,
                            Name = "2 x 120 mm (front)"
                        },
                        new
                        {
                            Id = 14,
                            Name = "2 x 120 mm (top)"
                        },
                        new
                        {
                            Id = 15,
                            Name = "2 x 120 mm (under)"
                        },
                        new
                        {
                            Id = 16,
                            Name = "2 x 120 mm (left)"
                        },
                        new
                        {
                            Id = 17,
                            Name = "2 x 120 mm (right)"
                        },
                        new
                        {
                            Id = 18,
                            Name = "1 x 80 mm (back)"
                        },
                        new
                        {
                            Id = 19,
                            Name = "3 x 120 mm (front)"
                        },
                        new
                        {
                            Id = 20,
                            Name = "1 x 140 mm (back)"
                        },
                        new
                        {
                            Id = 21,
                            Name = "3 x 120/140 mm (front)"
                        },
                        new
                        {
                            Id = 22,
                            Name = "1 x 120/140 mm (back)"
                        },
                        new
                        {
                            Id = 23,
                            Name = "3 x 120/140 mm (top)"
                        },
                        new
                        {
                            Id = 24,
                            Name = "3 x 120 mm (under)"
                        },
                        new
                        {
                            Id = 25,
                            Name = "3 x 120 mm"
                        },
                        new
                        {
                            Id = 26,
                            Name = "1 x 140 mm"
                        });
                });

            modelBuilder.Entity("VueBase.Models.FanSpeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_FanSpeed");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 250,
                            Name = "250 RPM"
                        },
                        new
                        {
                            Id = 300,
                            Name = "300 RPM"
                        },
                        new
                        {
                            Id = 500,
                            Name = "500 RPM"
                        },
                        new
                        {
                            Id = 600,
                            Name = "600 RPM"
                        },
                        new
                        {
                            Id = 800,
                            Name = "800 RPM"
                        },
                        new
                        {
                            Id = 900,
                            Name = "900 RPM"
                        },
                        new
                        {
                            Id = 1000,
                            Name = "1000 RPM"
                        },
                        new
                        {
                            Id = 1200,
                            Name = "1200 RPM"
                        },
                        new
                        {
                            Id = 1300,
                            Name = "1300 RPM"
                        },
                        new
                        {
                            Id = 1400,
                            Name = "1400 RPM"
                        },
                        new
                        {
                            Id = 1500,
                            Name = "1500 RPM"
                        },
                        new
                        {
                            Id = 1600,
                            Name = "1600 RPM"
                        },
                        new
                        {
                            Id = 1700,
                            Name = "1700 RPM"
                        },
                        new
                        {
                            Id = 1800,
                            Name = "1800 RPM"
                        },
                        new
                        {
                            Id = 2501800,
                            Name = "250 - 1800 RPM"
                        },
                        new
                        {
                            Id = 6001500,
                            Name = "600 - 1500 RPM"
                        });
                });

            modelBuilder.Entity("VueBase.Models.FormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_FormFactor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ATX"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SFX"
                        },
                        new
                        {
                            Id = 4,
                            Name = "2.5\""
                        },
                        new
                        {
                            Id = 5,
                            Name = "3.5\""
                        },
                        new
                        {
                            Id = 6,
                            Name = "M.2 2280"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Micro ATX"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Mini-ITX"
                        },
                        new
                        {
                            Id = 9,
                            Name = "EATX"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ITX"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Mini-DTX"
                        },
                        new
                        {
                            Id = 12,
                            Name = "SFX-L"
                        },
                        new
                        {
                            Id = 13,
                            Name = "EATX (up to 280 mm wide)"
                        },
                        new
                        {
                            Id = 14,
                            Name = "ATX 3.0"
                        });
                });

            modelBuilder.Entity("VueBase.Models.GPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BaseClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BoostClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChipsetID")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetProducerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InterfaceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxMonitors")
                        .HasColumnType("int");

                    b.Property<decimal>("MemoryBandwith")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemoryBusId")
                        .HasColumnType("int");

                    b.Property<decimal>("MemoryFrequency")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MemoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PowerConnectorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedPSUWattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ResolutionID")
                        .HasColumnType("int");

                    b.Property<int>("StreamProcessors")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ChipsetID");

                    b.HasIndex("ChipsetProducerId");

                    b.HasIndex("InterfaceTypeId");

                    b.HasIndex("MemoryBusId");

                    b.HasIndex("MemoryId");

                    b.HasIndex("MemoryTypeId");

                    b.HasIndex("PowerConnectorID");

                    b.HasIndex("ProducerId");

                    b.HasIndex("ResolutionID");

                    b.ToTable("GPU");
                });

            modelBuilder.Entity("VueBase.Models.GPUChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Chipset");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GeForce RTX 4090"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GeForce RTX 4080"
                        },
                        new
                        {
                            Id = 4,
                            Name = "GeForce RTX 4070"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GeForce RTX 4070 Ti"
                        },
                        new
                        {
                            Id = 6,
                            Name = "GeForce RTX 4060"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Radeon RX 6600"
                        });
                });

            modelBuilder.Entity("VueBase.Models.HDD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CacheId")
                        .HasColumnType("int");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InterfaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int>("RPMId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CacheId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("RPMId");

                    b.ToTable("HDD");
                });

            modelBuilder.Entity("VueBase.Models.HeatPipes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_HeatPipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "1 x 6mm"
                        },
                        new
                        {
                            Id = 3,
                            Name = "2 x 6mm"
                        },
                        new
                        {
                            Id = 4,
                            Name = "3 x 6mm"
                        },
                        new
                        {
                            Id = 5,
                            Name = "4 x 6mm"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Heatsink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Heatsink");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "No"
                        });
                });

            modelBuilder.Entity("VueBase.Models.InternalGPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_InternalGPU");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AMD"
                        });
                });

            modelBuilder.Entity("VueBase.Models.InternalGPUSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_InternalGPUSupport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "No"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Lithography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Lithography");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 4,
                            Name = "4 nm"
                        },
                        new
                        {
                            Id = 5,
                            Name = "5 nm"
                        },
                        new
                        {
                            Id = 7,
                            Name = "7 nm"
                        },
                        new
                        {
                            Id = 10,
                            Name = "10 nm"
                        },
                        new
                        {
                            Id = 12,
                            Name = "12 nm"
                        },
                        new
                        {
                            Id = 14,
                            Name = "14 nm"
                        },
                        new
                        {
                            Id = 16,
                            Name = "16 nm"
                        },
                        new
                        {
                            Id = 22,
                            Name = "22 nm"
                        },
                        new
                        {
                            Id = 28,
                            Name = "28 nm"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Material");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aluminium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Steel"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Plastic"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Glass"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Carbon"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Wood"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Titanium"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Copper"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Mesh"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Tempered Glass"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Steel SECC 0.8 mm"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryBus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryBus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 64,
                            Name = "64 bit"
                        },
                        new
                        {
                            Id = 96,
                            Name = "96 bit"
                        },
                        new
                        {
                            Id = 128,
                            Name = "128 bit"
                        },
                        new
                        {
                            Id = 192,
                            Name = "192 bit"
                        },
                        new
                        {
                            Id = 256,
                            Name = "256 bit"
                        },
                        new
                        {
                            Id = 320,
                            Name = "320 bit"
                        },
                        new
                        {
                            Id = 384,
                            Name = "384 bit"
                        },
                        new
                        {
                            Id = 2048,
                            Name = "2048 bit"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryChannel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dual-Channel"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Quad-Channel"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Octal-Channel"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryConnectorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryConnectorType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DIMM"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SO-DIMM"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RDIMM"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryFrequency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 800,
                            Name = "800 MHz"
                        },
                        new
                        {
                            Id = 1066,
                            Name = "1066 MHz"
                        },
                        new
                        {
                            Id = 1333,
                            Name = "1333 MHz"
                        },
                        new
                        {
                            Id = 1600,
                            Name = "1600 MHz"
                        },
                        new
                        {
                            Id = 1866,
                            Name = "1866 MHz"
                        },
                        new
                        {
                            Id = 2133,
                            Name = "2133 MHz"
                        },
                        new
                        {
                            Id = 2250,
                            Name = "2250 MHz"
                        },
                        new
                        {
                            Id = 2400,
                            Name = "2400 MHz"
                        },
                        new
                        {
                            Id = 2500,
                            Name = "2500 MHz"
                        },
                        new
                        {
                            Id = 2600,
                            Name = "2600 MHz"
                        },
                        new
                        {
                            Id = 2666,
                            Name = "2666 MHz"
                        },
                        new
                        {
                            Id = 2667,
                            Name = "2667 MHz"
                        },
                        new
                        {
                            Id = 2800,
                            Name = "2800 MHz"
                        },
                        new
                        {
                            Id = 2933,
                            Name = "2933 MHz"
                        },
                        new
                        {
                            Id = 3000,
                            Name = "3000 MHz"
                        },
                        new
                        {
                            Id = 3066,
                            Name = "3066 MHz"
                        },
                        new
                        {
                            Id = 3200,
                            Name = "3200 MHz"
                        },
                        new
                        {
                            Id = 3300,
                            Name = "3300 MHz"
                        },
                        new
                        {
                            Id = 3333,
                            Name = "3333 MHz"
                        },
                        new
                        {
                            Id = 3400,
                            Name = "3400 MHz"
                        },
                        new
                        {
                            Id = 3466,
                            Name = "3466 MHz"
                        },
                        new
                        {
                            Id = 3533,
                            Name = "3533 MHz"
                        },
                        new
                        {
                            Id = 3600,
                            Name = "3600 MHz"
                        },
                        new
                        {
                            Id = 3666,
                            Name = "3666 MHz"
                        },
                        new
                        {
                            Id = 3733,
                            Name = "3733 MHz"
                        },
                        new
                        {
                            Id = 3800,
                            Name = "3800 MHz"
                        },
                        new
                        {
                            Id = 3866,
                            Name = "3866 MHz"
                        },
                        new
                        {
                            Id = 4000,
                            Name = "4000 MHz"
                        },
                        new
                        {
                            Id = 4133,
                            Name = "4133 MHz"
                        },
                        new
                        {
                            Id = 4200,
                            Name = "4200 MHz"
                        },
                        new
                        {
                            Id = 4266,
                            Name = "4266 MHz"
                        },
                        new
                        {
                            Id = 4300,
                            Name = "4300 MHz"
                        },
                        new
                        {
                            Id = 4333,
                            Name = "4333 MHz"
                        },
                        new
                        {
                            Id = 4400,
                            Name = "4400 MHz"
                        },
                        new
                        {
                            Id = 4466,
                            Name = "4466 MHz"
                        },
                        new
                        {
                            Id = 4500,
                            Name = "4500 MHz"
                        },
                        new
                        {
                            Id = 4600,
                            Name = "4600 MHz"
                        },
                        new
                        {
                            Id = 4666,
                            Name = "4666 MHz"
                        },
                        new
                        {
                            Id = 4700,
                            Name = "4700 MHz"
                        },
                        new
                        {
                            Id = 4733,
                            Name = "4733 MHz"
                        },
                        new
                        {
                            Id = 4800,
                            Name = "4800 MHz"
                        },
                        new
                        {
                            Id = 4866,
                            Name = "4866 MHz"
                        },
                        new
                        {
                            Id = 4933,
                            Name = "4933 MHz"
                        },
                        new
                        {
                            Id = 5000,
                            Name = "5000 MHz"
                        },
                        new
                        {
                            Id = 5066,
                            Name = "5066 MHz"
                        },
                        new
                        {
                            Id = 5100,
                            Name = "5100 MHz"
                        },
                        new
                        {
                            Id = 5133,
                            Name = "5133 MHz"
                        },
                        new
                        {
                            Id = 5200,
                            Name = "5200 MHz"
                        },
                        new
                        {
                            Id = 5300,
                            Name = "5300 MHz"
                        },
                        new
                        {
                            Id = 5333,
                            Name = "5333 MHz"
                        },
                        new
                        {
                            Id = 5400,
                            Name = "5400 MHz"
                        },
                        new
                        {
                            Id = 5600,
                            Name = "5600 MHz"
                        },
                        new
                        {
                            Id = 5800,
                            Name = "5800 MHz"
                        },
                        new
                        {
                            Id = 6000,
                            Name = "6000 MHz"
                        },
                        new
                        {
                            Id = 6133,
                            Name = "6133 MHz"
                        },
                        new
                        {
                            Id = 6200,
                            Name = "6200 MHz"
                        },
                        new
                        {
                            Id = 6400,
                            Name = "6400 MHz"
                        },
                        new
                        {
                            Id = 6600,
                            Name = "6600 MHz"
                        },
                        new
                        {
                            Id = 6666,
                            Name = "6666 MHz"
                        },
                        new
                        {
                            Id = 6800,
                            Name = "6800 MHz"
                        },
                        new
                        {
                            Id = 7000,
                            Name = "7000 MHz"
                        },
                        new
                        {
                            Id = 7200,
                            Name = "7200 MHz"
                        },
                        new
                        {
                            Id = 7400,
                            Name = "7400 MHz"
                        },
                        new
                        {
                            Id = 7467,
                            Name = "7467 MHz"
                        },
                        new
                        {
                            Id = 7600,
                            Name = "7600 MHz"
                        },
                        new
                        {
                            Id = 7800,
                            Name = "7800 MHz"
                        },
                        new
                        {
                            Id = 7900,
                            Name = "7900 MHz"
                        },
                        new
                        {
                            Id = 7950,
                            Name = "7950 MHz"
                        },
                        new
                        {
                            Id = 8000,
                            Name = "8000 MHz"
                        },
                        new
                        {
                            Id = 8200,
                            Name = "8200 MHz"
                        },
                        new
                        {
                            Id = 8266,
                            Name = "8266 MHz"
                        },
                        new
                        {
                            Id = 8333,
                            Name = "8333 MHz"
                        },
                        new
                        {
                            Id = 8400,
                            Name = "8400 MHz"
                        },
                        new
                        {
                            Id = 8700,
                            Name = "8700 MHz"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HBM2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DDR3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DDR4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "DDR5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "GDDR3"
                        },
                        new
                        {
                            Id = 7,
                            Name = "GDDR5"
                        },
                        new
                        {
                            Id = 8,
                            Name = "GDDR6"
                        },
                        new
                        {
                            Id = 9,
                            Name = "GDDR6X"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryTypeFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryTypeFrequency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2133,
                            Name = "Up to DDR4 2133 MT/s"
                        },
                        new
                        {
                            Id = 2400,
                            Name = "Up to DDR4 2400 MT/s"
                        },
                        new
                        {
                            Id = 2666,
                            Name = "Up to DDR4 2666 MT/s"
                        },
                        new
                        {
                            Id = 2800,
                            Name = "Up to DDR4 2800 MT/s"
                        },
                        new
                        {
                            Id = 2933,
                            Name = "Up to DDR4 2933 MT/s"
                        },
                        new
                        {
                            Id = 3000,
                            Name = "Up to DDR4 3000 MT/s"
                        },
                        new
                        {
                            Id = 3200,
                            Name = "Up to DDR4 3200 MT/s"
                        },
                        new
                        {
                            Id = 4800,
                            Name = "Up to DDR5 4800 MT/s"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Microarchitecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Microarchitecture");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comet Lake"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Alder Lake"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Raptor Lake"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Zen 4"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Zen 3"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Modular", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Modular");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Non-Modular"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Semi-Modular"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fully-Modular"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Motherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CPUFamilyId")
                        .HasColumnType("int");

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<int>("InternalGPUSupportId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMemoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryChannelId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryConnectorTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemorySlots")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPUFamilyId");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("ChipsetId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("InternalGPUSupportId");

                    b.HasIndex("MaxMemoryId");

                    b.HasIndex("MemoryChannelId");

                    b.HasIndex("MemoryConnectorTypeId");

                    b.HasIndex("MemoryTypeId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Motherboard");
                });

            modelBuilder.Entity("VueBase.Models.MotherboardChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MotherboardChipset");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intel B760"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intel Z790"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Intel H610"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Intel Z690"
                        },
                        new
                        {
                            Id = 6,
                            Name = "AMD B650"
                        },
                        new
                        {
                            Id = 7,
                            Name = "AMD B550"
                        },
                        new
                        {
                            Id = 8,
                            Name = "AMD B450"
                        },
                        new
                        {
                            Id = 9,
                            Name = "AMD A520"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Intel H770"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Intel Q670"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Intel H670"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Intel B660"
                        },
                        new
                        {
                            Id = 14,
                            Name = "AMD X570"
                        },
                        new
                        {
                            Id = 15,
                            Name = "AMD X470"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Mount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Mount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Horizontal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vertical"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MTBF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MTBF");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 25000,
                            Name = "25 000 h"
                        },
                        new
                        {
                            Id = 30000,
                            Name = "30 000 h"
                        },
                        new
                        {
                            Id = 40000,
                            Name = "40 000 h"
                        },
                        new
                        {
                            Id = 50000,
                            Name = "50 000 h"
                        },
                        new
                        {
                            Id = 60000,
                            Name = "60 000 h"
                        },
                        new
                        {
                            Id = 70000,
                            Name = "70 000 h"
                        },
                        new
                        {
                            Id = 73500,
                            Name = "73 500 h"
                        },
                        new
                        {
                            Id = 80000,
                            Name = "80 000 h"
                        },
                        new
                        {
                            Id = 90000,
                            Name = "90 000 h"
                        },
                        new
                        {
                            Id = 100000,
                            Name = "100 000 h"
                        },
                        new
                        {
                            Id = 110000,
                            Name = "110 000 h"
                        },
                        new
                        {
                            Id = 120000,
                            Name = "120 000 h"
                        },
                        new
                        {
                            Id = 150000,
                            Name = "150 000 h"
                        },
                        new
                        {
                            Id = 160000,
                            Name = "160 000 h"
                        },
                        new
                        {
                            Id = 300000,
                            Name = "300 000 h"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Overclocking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Overclocking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AMD EXPO"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intel XMP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Intel XMP 2.0"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Intel XMP 3.0"
                        });
                });

            modelBuilder.Entity("VueBase.Models.PFC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_PFC");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Active"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Producers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lexar"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Preyon"
                        },
                        new
                        {
                            Id = 7,
                            Name = "XPG"
                        },
                        new
                        {
                            Id = 8,
                            Name = "KRUX"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Corsair"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Kingston"
                        },
                        new
                        {
                            Id = 11,
                            Name = "GSkill"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Crucial"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Patriot"
                        },
                        new
                        {
                            Id = 14,
                            Name = "TeamGroup"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Adata"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Apacer"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Lian Li"
                        },
                        new
                        {
                            Id = 18,
                            Name = "MSI"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Gigabyte"
                        },
                        new
                        {
                            Id = 20,
                            Name = "NVIDIA"
                        },
                        new
                        {
                            Id = 21,
                            Name = "ENDORFY"
                        },
                        new
                        {
                            Id = 22,
                            Name = "be quiet!"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Seagate"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Genesis"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Silver Monkey"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Silver Monkey X"
                        });
                });

            modelBuilder.Entity("VueBase.Models.ProtectionFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_ProtectionFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OVP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UVP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SCP"
                        },
                        new
                        {
                            Id = 5,
                            Name = "OLP"
                        },
                        new
                        {
                            Id = 6,
                            Name = "OTP"
                        },
                        new
                        {
                            Id = 7,
                            Name = "OPP"
                        },
                        new
                        {
                            Id = 8,
                            Name = "SIP"
                        },
                        new
                        {
                            Id = 9,
                            Name = "NLO"
                        },
                        new
                        {
                            Id = 10,
                            Name = "OCP"
                        });
                });

            modelBuilder.Entity("VueBase.Models.PSU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CoolingId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ModularId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PFCId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoolingId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("ModularId");

                    b.HasIndex("PFCId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("RatingId");

                    b.ToTable("PSU");
                });

            modelBuilder.Entity("VueBase.Models.RAID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_RAID");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "None"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RAID 0"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RAID 1"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RAID 5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RAID 10"
                        });
                });

            modelBuilder.Entity("VueBase.Models.RAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConnectorTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CoolingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CycleLatencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemoryFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Modules")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int>("VoltageId")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorTypeId");

                    b.HasIndex("CoolingTypeId");

                    b.HasIndex("CycleLatencyId");

                    b.HasIndex("MemoryFrequencyId");

                    b.HasIndex("MemoryId");

                    b.HasIndex("MemoryTypeId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("VoltageId");

                    b.ToTable("RAM");
                });

            modelBuilder.Entity("VueBase.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "80 PLUS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "80 PLUS Bronze"
                        },
                        new
                        {
                            Id = 4,
                            Name = "80 PLUS Silver"
                        },
                        new
                        {
                            Id = 5,
                            Name = "80 PLUS Gold"
                        },
                        new
                        {
                            Id = 6,
                            Name = "80 PLUS Platinum"
                        },
                        new
                        {
                            Id = 7,
                            Name = "80 PLUS Titanium"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Unclassified"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Resolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Resolution");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2560,
                            Name = "2560 x 1600"
                        },
                        new
                        {
                            Id = 3840,
                            Name = "3840 x 2160"
                        },
                        new
                        {
                            Id = 4096,
                            Name = "4096 x 2160"
                        },
                        new
                        {
                            Id = 5120,
                            Name = "5120 x 2880"
                        },
                        new
                        {
                            Id = 7680,
                            Name = "7680 x 4320"
                        });
                });

            modelBuilder.Entity("VueBase.Models.RPM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_RPM");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "5400 RPM"
                        },
                        new
                        {
                            Id = 3,
                            Name = "7200 RPM"
                        },
                        new
                        {
                            Id = 4,
                            Name = "10000 RPM"
                        });
                });

            modelBuilder.Entity("VueBase.Models.SSD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CacheId")
                        .HasColumnType("int");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int");

                    b.Property<int>("CellTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EncryptionId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<int>("HeatsinkId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InterfaceId")
                        .HasColumnType("int");

                    b.Property<int>("KeyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MTBF")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<decimal>("RandomRead")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RandomWrite")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReadSpeed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TBW")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WriteSpeed")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CacheId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("CellTypeId");

                    b.HasIndex("EncryptionId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("HeatsinkId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("KeyId");

                    b.HasIndex("ProducerId");

                    b.ToTable("SSD");
                });

            modelBuilder.Entity("VueBase.Models.SSDKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Key");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "A"
                        },
                        new
                        {
                            Id = 3,
                            Name = "B"
                        },
                        new
                        {
                            Id = 4,
                            Name = "C"
                        },
                        new
                        {
                            Id = 5,
                            Name = "D"
                        },
                        new
                        {
                            Id = 6,
                            Name = "E"
                        },
                        new
                        {
                            Id = 7,
                            Name = "F"
                        },
                        new
                        {
                            Id = 8,
                            Name = "G"
                        },
                        new
                        {
                            Id = 9,
                            Name = "H"
                        },
                        new
                        {
                            Id = 10,
                            Name = "I"
                        },
                        new
                        {
                            Id = 11,
                            Name = "J"
                        },
                        new
                        {
                            Id = 12,
                            Name = "K"
                        },
                        new
                        {
                            Id = 13,
                            Name = "L"
                        },
                        new
                        {
                            Id = 14,
                            Name = "M"
                        });
                });

            modelBuilder.Entity("VueBase.Models.TDP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_TDP");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 65,
                            Name = "65 W"
                        },
                        new
                        {
                            Id = 70,
                            Name = "70 W"
                        },
                        new
                        {
                            Id = 85,
                            Name = "85 W"
                        },
                        new
                        {
                            Id = 95,
                            Name = "95 W"
                        },
                        new
                        {
                            Id = 100,
                            Name = "100 W"
                        },
                        new
                        {
                            Id = 110,
                            Name = "110 W"
                        },
                        new
                        {
                            Id = 120,
                            Name = "120 W"
                        },
                        new
                        {
                            Id = 130,
                            Name = "130 W"
                        },
                        new
                        {
                            Id = 140,
                            Name = "140 W"
                        },
                        new
                        {
                            Id = 150,
                            Name = "150 W"
                        },
                        new
                        {
                            Id = 160,
                            Name = "160 W"
                        },
                        new
                        {
                            Id = 170,
                            Name = "170 W"
                        },
                        new
                        {
                            Id = 180,
                            Name = "180 W"
                        },
                        new
                        {
                            Id = 190,
                            Name = "190 W"
                        },
                        new
                        {
                            Id = 200,
                            Name = "200 W"
                        },
                        new
                        {
                            Id = 210,
                            Name = "210 W"
                        },
                        new
                        {
                            Id = 220,
                            Name = "220 W"
                        },
                        new
                        {
                            Id = 230,
                            Name = "230 W"
                        },
                        new
                        {
                            Id = 240,
                            Name = "240 W"
                        },
                        new
                        {
                            Id = 250,
                            Name = "250 W"
                        },
                        new
                        {
                            Id = 260,
                            Name = "260 W"
                        },
                        new
                        {
                            Id = 270,
                            Name = "270 W"
                        },
                        new
                        {
                            Id = 280,
                            Name = "280 W"
                        },
                        new
                        {
                            Id = 290,
                            Name = "290 W"
                        },
                        new
                        {
                            Id = 300,
                            Name = "300 W"
                        },
                        new
                        {
                            Id = 400,
                            Name = "400 W"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Voltage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Voltage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 110,
                            Name = "1.1 V"
                        },
                        new
                        {
                            Id = 120,
                            Name = "1.2 V"
                        },
                        new
                        {
                            Id = 125,
                            Name = "1.25 V"
                        },
                        new
                        {
                            Id = 130,
                            Name = "1.3 V"
                        },
                        new
                        {
                            Id = 135,
                            Name = "1.35 V"
                        },
                        new
                        {
                            Id = 140,
                            Name = "1.4 V"
                        },
                        new
                        {
                            Id = 145,
                            Name = "1.45 V"
                        },
                        new
                        {
                            Id = 150,
                            Name = "1.5 V"
                        },
                        new
                        {
                            Id = 155,
                            Name = "1.55 V"
                        },
                        new
                        {
                            Id = 160,
                            Name = "1.6 V"
                        },
                        new
                        {
                            Id = 165,
                            Name = "1.65 V"
                        },
                        new
                        {
                            Id = 170,
                            Name = "1.7 V"
                        },
                        new
                        {
                            Id = 175,
                            Name = "1.75 V"
                        },
                        new
                        {
                            Id = 180,
                            Name = "1.8 V"
                        },
                        new
                        {
                            Id = 190,
                            Name = "1.9 V"
                        },
                        new
                        {
                            Id = 250,
                            Name = "2.5 V"
                        },
                        new
                        {
                            Id = 260,
                            Name = "2.6 V"
                        });
                });

            modelBuilder.Entity("VueBase.Models.WaterCoolingSlots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_WaterCoolingSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "1 x 120 mm (front) - radiator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "1 x 140 mm (front) - radiator"
                        },
                        new
                        {
                            Id = 4,
                            Name = "1 x 240 mm (front) - radiator"
                        },
                        new
                        {
                            Id = 5,
                            Name = "1 x 280 mm (front) - radiator"
                        },
                        new
                        {
                            Id = 6,
                            Name = "1 x 360 mm (front) - radiator"
                        },
                        new
                        {
                            Id = 7,
                            Name = "1 x 120 mm (back) - radiator"
                        },
                        new
                        {
                            Id = 8,
                            Name = "1 x 120 mm (top) - radiator"
                        },
                        new
                        {
                            Id = 9,
                            Name = "1 x 140 mm (top) - radiator"
                        },
                        new
                        {
                            Id = 10,
                            Name = "1 x 240 mm (top) - radiator"
                        },
                        new
                        {
                            Id = 11,
                            Name = "1 x 280 mm (top) - radiator, without ODD cage"
                        },
                        new
                        {
                            Id = 12,
                            Name = "1 x 120 mm (under) - radiator"
                        },
                        new
                        {
                            Id = 13,
                            Name = "1 x 240 mm (under) - radiator"
                        },
                        new
                        {
                            Id = 14,
                            Name = "1 x 120 mm (left) - radiator"
                        },
                        new
                        {
                            Id = 15,
                            Name = "1 x 240 mm (left) - radiator"
                        },
                        new
                        {
                            Id = 16,
                            Name = "1 x 120 mm (right) - radiator"
                        },
                        new
                        {
                            Id = 17,
                            Name = "1 x 240 mm (right) - radiator"
                        },
                        new
                        {
                            Id = 18,
                            Name = "1 x 360 mm (right) - radiator"
                        },
                        new
                        {
                            Id = 19,
                            Name = "1 x 120 mm (front) - radiator, without ODD cage"
                        },
                        new
                        {
                            Id = 20,
                            Name = "1 x 420 mm (front) - radiator"
                        },
                        new
                        {
                            Id = 21,
                            Name = "1 x 420 mm (top) - radiator"
                        },
                        new
                        {
                            Id = 22,
                            Name = "1 x 420 mm (under) - radiator"
                        },
                        new
                        {
                            Id = 23,
                            Name = "1 x 420 mm (left) - radiator"
                        },
                        new
                        {
                            Id = 24,
                            Name = "1 x 420 mm (right) - radiator"
                        },
                        new
                        {
                            Id = 25,
                            Name = "1 x 360 mm (top) - radiator"
                        },
                        new
                        {
                            Id = 26,
                            Name = "1 x 360 mm (under) - radiator"
                        },
                        new
                        {
                            Id = 27,
                            Name = "1 x 360 mm (left) - radiator"
                        });
                });

            modelBuilder.Entity("VueBase.Models.WirelessTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_WirelessTechnology");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bluetooth"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wi-Fi 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Wi-Fi 5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Wi-Fi 6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Wi-Fi 6E"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Wi-Fi 7"
                        });
                });

            modelBuilder.Entity("Join_Case_Buttons", b =>
                {
                    b.HasOne("VueBase.Models.Buttons", null)
                        .WithMany()
                        .HasForeignKey("ButtonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_Color", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_DriveBay", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.DriveBay", null)
                        .WithMany()
                        .HasForeignKey("DriveBayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_FanBays", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Fans", null)
                        .WithMany()
                        .HasForeignKey("FanBaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_FormFactor", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", null)
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_InstalledFans", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Fans", null)
                        .WithMany()
                        .HasForeignKey("InstalledFansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_Material", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_Port", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Connector", null)
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_PSUMount", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", null)
                        .WithMany()
                        .HasForeignKey("PSUMountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Case_WaterCoolingSlots", b =>
                {
                    b.HasOne("VueBase.Models.Case", null)
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.WaterCoolingSlots", null)
                        .WithMany()
                        .HasForeignKey("WaterCoolingSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CaseCooler_Color", b =>
                {
                    b.HasOne("VueBase.Models.CaseCooler", null)
                        .WithMany()
                        .HasForeignKey("CaseCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPU_MemoryTypeFrequency", b =>
                {
                    b.HasOne("VueBase.Models.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryTypeFrequency", null)
                        .WithMany()
                        .HasForeignKey("MemoryTypeFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPU_MotherboardChipset", b =>
                {
                    b.HasOne("VueBase.Models.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MotherboardChipset", null)
                        .WithMany()
                        .HasForeignKey("MotherboardChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPUCooler_Color", b =>
                {
                    b.HasOne("VueBase.Models.CPUCooler", null)
                        .WithMany()
                        .HasForeignKey("CPUCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPUCooler_CPUSocket", b =>
                {
                    b.HasOne("VueBase.Models.CPUCooler", null)
                        .WithMany()
                        .HasForeignKey("CPUCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CPUSocket", null)
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPUCooler_Material", b =>
                {
                    b.HasOne("VueBase.Models.CPUCooler", null)
                        .WithMany()
                        .HasForeignKey("CPUCoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_GPU_Port", b =>
                {
                    b.HasOne("VueBase.Models.GPU", null)
                        .WithMany()
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Connector", null)
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_ExternalConnector", b =>
                {
                    b.HasOne("VueBase.Models.Connector", null)
                        .WithMany()
                        .HasForeignKey("ExternalConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_InternalConnector", b =>
                {
                    b.HasOne("VueBase.Models.Connector", null)
                        .WithMany()
                        .HasForeignKey("InternalConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_MemoryFrequency", b =>
                {
                    b.HasOne("VueBase.Models.MemoryFrequency", null)
                        .WithMany()
                        .HasForeignKey("MemoryFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_RAID", b =>
                {
                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.RAID", null)
                        .WithMany()
                        .HasForeignKey("RAIDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_Motherboard_WirelessTechnology", b =>
                {
                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.WirelessTechnology", null)
                        .WithMany()
                        .HasForeignKey("WirelessTechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSU_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSU_Connector", b =>
                {
                    b.HasOne("VueBase.Models.Connector", null)
                        .WithMany()
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSU_ProtectionFeatures", b =>
                {
                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.ProtectionFeatures", null)
                        .WithMany()
                        .HasForeignKey("ProtectionFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_RAM_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.RAM", null)
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_RAM_Overclocking", b =>
                {
                    b.HasOne("VueBase.Models.Overclocking", null)
                        .WithMany()
                        .HasForeignKey("OverclockingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.RAM", null)
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_SSD_Color", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.SSD", null)
                        .WithMany()
                        .HasForeignKey("SSDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VueBase.Models.Case", b =>
                {
                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("VueBase.Models.Material", "SidePanelMaterial")
                        .WithMany()
                        .HasForeignKey("SidePanelMaterialId");

                    b.HasOne("VueBase.Models.CaseType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");

                    b.Navigation("SidePanelMaterial");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("VueBase.Models.CaseCooler", b =>
                {
                    b.HasOne("VueBase.Models.Connector", "Connector")
                        .WithMany()
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FanBearing", "FanBearing")
                        .WithMany()
                        .HasForeignKey("FanBearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FanSpeed", "FanSpeed")
                        .WithMany()
                        .HasForeignKey("FanSpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Fans", "Fans")
                        .WithMany()
                        .HasForeignKey("FansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MTBF", "MTBF")
                        .WithMany()
                        .HasForeignKey("MTBFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.Navigation("Connector");

                    b.Navigation("FanBearing");

                    b.Navigation("FanSpeed");

                    b.Navigation("Fans");

                    b.Navigation("MTBF");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.CPU", b =>
                {
                    b.HasOne("VueBase.Models.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Cache", "CacheL1")
                        .WithMany()
                        .HasForeignKey("CacheL1Id");

                    b.HasOne("VueBase.Models.Cache", "CacheL2")
                        .WithMany()
                        .HasForeignKey("CacheL2Id");

                    b.HasOne("VueBase.Models.Cache", "CacheL3")
                        .WithMany()
                        .HasForeignKey("CacheL3Id");

                    b.HasOne("VueBase.Models.DataWidth", "DataWidth")
                        .WithMany()
                        .HasForeignKey("DataWidthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InternalGPU", "InternalGPU")
                        .WithMany()
                        .HasForeignKey("InternalGPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Lithography", "Lithography")
                        .WithMany()
                        .HasForeignKey("LithographyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "MaxMemory")
                        .WithMany()
                        .HasForeignKey("MaxMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryChannel", "MemoryChannel")
                        .WithMany()
                        .HasForeignKey("MemoryChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Microarchitecture", "Microarchitecture")
                        .WithMany()
                        .HasForeignKey("MicroarchitectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.Navigation("CPUSocket");

                    b.Navigation("CacheL1");

                    b.Navigation("CacheL2");

                    b.Navigation("CacheL3");

                    b.Navigation("DataWidth");

                    b.Navigation("InternalGPU");

                    b.Navigation("Lithography");

                    b.Navigation("MaxMemory");

                    b.Navigation("MemoryChannel");

                    b.Navigation("Microarchitecture");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.CPUCooler", b =>
                {
                    b.HasOne("VueBase.Models.Connector", "Connector")
                        .WithMany()
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CoolingType", "CoolingType")
                        .WithMany()
                        .HasForeignKey("CoolingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FanBearing", "FanBearing")
                        .WithMany()
                        .HasForeignKey("FanBearingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FanSpeed", "FanSpeed")
                        .WithMany()
                        .HasForeignKey("FanSpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Fans", "Fans")
                        .WithMany()
                        .HasForeignKey("FansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.HeatPipes", "HeatPipes")
                        .WithMany()
                        .HasForeignKey("HeatPipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MTBF", "MTBF")
                        .WithMany()
                        .HasForeignKey("MTBFId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Mount", "Mount")
                        .WithMany()
                        .HasForeignKey("MountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("VueBase.Models.TDP", "TDP")
                        .WithMany()
                        .HasForeignKey("TDPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("CoolingType");

                    b.Navigation("FanBearing");

                    b.Navigation("FanSpeed");

                    b.Navigation("Fans");

                    b.Navigation("HeatPipes");

                    b.Navigation("MTBF");

                    b.Navigation("Mount");

                    b.Navigation("Producer");

                    b.Navigation("TDP");
                });

            modelBuilder.Entity("VueBase.Models.GPU", b =>
                {
                    b.HasOne("VueBase.Models.GPUChipset", "Chipset")
                        .WithMany()
                        .HasForeignKey("ChipsetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "ChipsetProducer")
                        .WithMany()
                        .HasForeignKey("ChipsetProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Connector", "InterfaceType")
                        .WithMany()
                        .HasForeignKey("InterfaceTypeId");

                    b.HasOne("VueBase.Models.MemoryBus", "MemoryBus")
                        .WithMany()
                        .HasForeignKey("MemoryBusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Memory")
                        .WithMany()
                        .HasForeignKey("MemoryId");

                    b.HasOne("VueBase.Models.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Connector", "PowerConnector")
                        .WithMany()
                        .HasForeignKey("PowerConnectorID");

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("VueBase.Models.Resolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chipset");

                    b.Navigation("ChipsetProducer");

                    b.Navigation("InterfaceType");

                    b.Navigation("Memory");

                    b.Navigation("MemoryBus");

                    b.Navigation("MemoryType");

                    b.Navigation("PowerConnector");

                    b.Navigation("Producer");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("VueBase.Models.HDD", b =>
                {
                    b.HasOne("VueBase.Models.Cache", "Cache")
                        .WithMany()
                        .HasForeignKey("CacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Connector", "Interface")
                        .WithMany()
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("VueBase.Models.RPM", "RPM")
                        .WithMany()
                        .HasForeignKey("RPMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cache");

                    b.Navigation("Capacity");

                    b.Navigation("FormFactor");

                    b.Navigation("Interface");

                    b.Navigation("Producer");

                    b.Navigation("RPM");
                });

            modelBuilder.Entity("VueBase.Models.Motherboard", b =>
                {
                    b.HasOne("VueBase.Models.CPUFamily", "CPUFamily")
                        .WithMany()
                        .HasForeignKey("CPUFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MotherboardChipset", "Chipset")
                        .WithMany()
                        .HasForeignKey("ChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InternalGPUSupport", "InternalGPUSupport")
                        .WithMany()
                        .HasForeignKey("InternalGPUSupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "MaxMemory")
                        .WithMany()
                        .HasForeignKey("MaxMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryChannel", "MemoryChannel")
                        .WithMany()
                        .HasForeignKey("MemoryChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryConnectorType", "MemoryConnectorType")
                        .WithMany("Motherboard")
                        .HasForeignKey("MemoryConnectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.Navigation("CPUFamily");

                    b.Navigation("CPUSocket");

                    b.Navigation("Chipset");

                    b.Navigation("FormFactor");

                    b.Navigation("InternalGPUSupport");

                    b.Navigation("MaxMemory");

                    b.Navigation("MemoryChannel");

                    b.Navigation("MemoryConnectorType");

                    b.Navigation("MemoryType");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.PSU", b =>
                {
                    b.HasOne("VueBase.Models.Cooling", "Cooling")
                        .WithMany()
                        .HasForeignKey("CoolingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Modular", "Modular")
                        .WithMany()
                        .HasForeignKey("ModularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PFC", "PFC")
                        .WithMany()
                        .HasForeignKey("PFCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("VueBase.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cooling");

                    b.Navigation("FormFactor");

                    b.Navigation("Modular");

                    b.Navigation("PFC");

                    b.Navigation("Producer");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("VueBase.Models.RAM", b =>
                {
                    b.HasOne("VueBase.Models.MemoryConnectorType", "ConnectorType")
                        .WithMany()
                        .HasForeignKey("ConnectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CoolingType", "CoolingType")
                        .WithMany()
                        .HasForeignKey("CoolingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CycleLatency", "CycleLatency")
                        .WithMany()
                        .HasForeignKey("CycleLatencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryFrequency", "MemoryFrequency")
                        .WithMany()
                        .HasForeignKey("MemoryFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Memory")
                        .WithMany()
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.HasOne("VueBase.Models.Voltage", "Voltage")
                        .WithMany()
                        .HasForeignKey("VoltageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectorType");

                    b.Navigation("CoolingType");

                    b.Navigation("CycleLatency");

                    b.Navigation("Memory");

                    b.Navigation("MemoryFrequency");

                    b.Navigation("MemoryType");

                    b.Navigation("Producer");

                    b.Navigation("Voltage");
                });

            modelBuilder.Entity("VueBase.Models.SSD", b =>
                {
                    b.HasOne("VueBase.Models.Cache", "Cache")
                        .WithMany()
                        .HasForeignKey("CacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CellType", "CellType")
                        .WithMany()
                        .HasForeignKey("CellTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Encryption", "Encryption")
                        .WithMany()
                        .HasForeignKey("EncryptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Heatsink", "Heatsink")
                        .WithMany()
                        .HasForeignKey("HeatsinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Connector", "Interface")
                        .WithMany()
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.SSDKey", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId");

                    b.Navigation("Cache");

                    b.Navigation("Capacity");

                    b.Navigation("CellType");

                    b.Navigation("Encryption");

                    b.Navigation("FormFactor");

                    b.Navigation("Heatsink");

                    b.Navigation("Interface");

                    b.Navigation("Key");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.MemoryConnectorType", b =>
                {
                    b.Navigation("Motherboard");
                });
#pragma warning restore 612, 618
        }
    }
}
