// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VueBase.Data;

#nullable disable

namespace VueBase.Migrations
{
    [DbContext(typeof(PCContext))]
    [Migration("20240222143120_migration2.1")]
    partial class migration21
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Join_CPUColor", b =>
                {
                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("CPUId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("Join_CPUColor");
                });

            modelBuilder.Entity("Join_CPUMemoryTypeFrequency", b =>
                {
                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeFrequencyId")
                        .HasColumnType("int");

                    b.HasKey("CPUId", "MemoryTypeFrequencyId");

                    b.HasIndex("MemoryTypeFrequencyId");

                    b.ToTable("Join_CPUMemoryTypeFrequency");
                });

            modelBuilder.Entity("Join_CPUMotherboardChipset", b =>
                {
                    b.Property<int>("CPUId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardChipsetId")
                        .HasColumnType("int");

                    b.HasKey("CPUId", "MotherboardChipsetId");

                    b.HasIndex("MotherboardChipsetId");

                    b.ToTable("Join_CPUMotherboardChipset");
                });

            modelBuilder.Entity("Join_GPUColor", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("GPUId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "GPUId");

                    b.HasIndex("GPUId");

                    b.ToTable("Join_GPUColor");
                });

            modelBuilder.Entity("Join_GPUPort", b =>
                {
                    b.Property<int>("GPUId")
                        .HasColumnType("int");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.HasKey("GPUId", "PortId");

                    b.HasIndex("PortId");

                    b.ToTable("Join_GPUPort");
                });

            modelBuilder.Entity("Join_HDDColor", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("HDDId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "HDDId");

                    b.HasIndex("HDDId");

                    b.ToTable("Join_HDDColor");
                });

            modelBuilder.Entity("Join_MotherboardColor", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_MotherboardColor");
                });

            modelBuilder.Entity("Join_MotherboardExternalConnector", b =>
                {
                    b.Property<int>("ExternalConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("ExternalConnectorId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_MotherboardExternalConnector");
                });

            modelBuilder.Entity("Join_MotherboardInternalConnector", b =>
                {
                    b.Property<int>("InternalConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("InternalConnectorId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_MotherboardInternalConnector");
                });

            modelBuilder.Entity("Join_MotherboardMemoryFrequency", b =>
                {
                    b.Property<int>("MemoryFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("MemoryFrequencyId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_MotherboardMemoryFrequency");
                });

            modelBuilder.Entity("Join_MotherboardMemorySlots", b =>
                {
                    b.Property<int>("MemorySlotsId")
                        .HasColumnType("int");

                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.HasKey("MemorySlotsId", "MotherboardId");

                    b.HasIndex("MotherboardId");

                    b.ToTable("Join_MotherboardMemorySlots");
                });

            modelBuilder.Entity("Join_MotherboardRAID", b =>
                {
                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<int>("RAIDId")
                        .HasColumnType("int");

                    b.HasKey("MotherboardId", "RAIDId");

                    b.HasIndex("RAIDId");

                    b.ToTable("Join_MotherboardRAID");
                });

            modelBuilder.Entity("Join_MotherboardWirelessTechnology", b =>
                {
                    b.Property<int>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<int>("WirelessTechnologyId")
                        .HasColumnType("int");

                    b.HasKey("MotherboardId", "WirelessTechnologyId");

                    b.HasIndex("WirelessTechnologyId");

                    b.ToTable("Join_MotherboardWirelessTechnology");
                });

            modelBuilder.Entity("Join_PSUColor", b =>
                {
                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.HasKey("ColorId", "PSUId");

                    b.HasIndex("PSUId");

                    b.ToTable("Join_PSUColor");
                });

            modelBuilder.Entity("Join_PSUConnector", b =>
                {
                    b.Property<int>("ConnectorId")
                        .HasColumnType("int");

                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.HasKey("ConnectorId", "PSUId");

                    b.HasIndex("PSUId");

                    b.ToTable("Join_PSUConnector");
                });

            modelBuilder.Entity("Join_PSUProtectionFeatures", b =>
                {
                    b.Property<int>("PSUId")
                        .HasColumnType("int");

                    b.Property<int>("ProtectionFeaturesId")
                        .HasColumnType("int");

                    b.HasKey("PSUId", "ProtectionFeaturesId");

                    b.HasIndex("ProtectionFeaturesId");

                    b.ToTable("Join_PSUProtectionFeatures");
                });

            modelBuilder.Entity("VueBase.Models.Architecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Architecture");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 4,
                            Name = "nm_4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "nm_5"
                        },
                        new
                        {
                            Id = 7,
                            Name = "nm_7"
                        },
                        new
                        {
                            Id = 10,
                            Name = "nm_10"
                        },
                        new
                        {
                            Id = 12,
                            Name = "nm_12"
                        },
                        new
                        {
                            Id = 14,
                            Name = "nm_14"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Cache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Cache");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 128,
                            Name = "KB_128"
                        },
                        new
                        {
                            Id = 256,
                            Name = "KB_256"
                        },
                        new
                        {
                            Id = 512,
                            Name = "KB_512"
                        },
                        new
                        {
                            Id = 1000,
                            Name = "MB_1"
                        },
                        new
                        {
                            Id = 2000,
                            Name = "MB_2"
                        },
                        new
                        {
                            Id = 4000,
                            Name = "MB_4"
                        },
                        new
                        {
                            Id = 8000,
                            Name = "MB_8"
                        },
                        new
                        {
                            Id = 16000,
                            Name = "MB_16"
                        },
                        new
                        {
                            Id = 32000,
                            Name = "MB_32"
                        },
                        new
                        {
                            Id = 64000,
                            Name = "MB_64"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Capacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Capacity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 16,
                            Name = "16 GB"
                        },
                        new
                        {
                            Id = 32,
                            Name = "32 GB"
                        },
                        new
                        {
                            Id = 64,
                            Name = "64 GB"
                        },
                        new
                        {
                            Id = 128,
                            Name = "128 GB"
                        },
                        new
                        {
                            Id = 256,
                            Name = "256 GB"
                        },
                        new
                        {
                            Id = 512,
                            Name = "512 GB"
                        },
                        new
                        {
                            Id = 1000,
                            Name = "1 TB"
                        },
                        new
                        {
                            Id = 2000,
                            Name = "2 TB"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 8,
                            Name = "White"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Gold"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Connectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Connectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SATA"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PCI_E"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MOLEX"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Cooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Cooling");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 120,
                            Name = "Fan_120mm"
                        },
                        new
                        {
                            Id = 135,
                            Name = "Fan_135mm"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArchitectureId")
                        .HasColumnType("int");

                    b.Property<decimal>("BaseClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BoostClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL1Id")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL2Id")
                        .HasColumnType("int");

                    b.Property<int?>("CacheL3Id")
                        .HasColumnType("int");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<int>("DataWidthId")
                        .HasColumnType("int");

                    b.Property<int>("InternalGPUId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMemoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxWattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.Property<bool>("UnlockedMultiplier")
                        .HasColumnType("bit");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ArchitectureId");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("CacheL1Id");

                    b.HasIndex("CacheL2Id");

                    b.HasIndex("CacheL3Id");

                    b.HasIndex("DataWidthId");

                    b.HasIndex("InternalGPUId");

                    b.HasIndex("MaxMemoryId");

                    b.HasIndex("ProducerID");

                    b.ToTable("CPU");
                });

            modelBuilder.Entity("VueBase.Models.CPUFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_PUFamily");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intel"
                        });
                });

            modelBuilder.Entity("VueBase.Models.CPUSocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_CPUSocket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LGA_1200"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AM4"
                        },
                        new
                        {
                            Id = 4,
                            Name = "LGA_1151"
                        },
                        new
                        {
                            Id = 5,
                            Name = "LGA_2066"
                        });
                });

            modelBuilder.Entity("VueBase.Models.DataWidth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_DataWidth");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Bit_32"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Bit_64"
                        });
                });

            modelBuilder.Entity("VueBase.Models.ExternalConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_ExternalConnector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "USB_2_0"
                        },
                        new
                        {
                            Id = 3,
                            Name = "USB_3_2_Gen_1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "USB_3_2_Gen_2"
                        },
                        new
                        {
                            Id = 5,
                            Name = "USB_3_2_Gen_2x2"
                        },
                        new
                        {
                            Id = 6,
                            Name = "USB_4"
                        },
                        new
                        {
                            Id = 7,
                            Name = "USB_C"
                        },
                        new
                        {
                            Id = 8,
                            Name = "HDMI"
                        },
                        new
                        {
                            Id = 9,
                            Name = "DP"
                        },
                        new
                        {
                            Id = 10,
                            Name = "VGA"
                        },
                        new
                        {
                            Id = 11,
                            Name = "DVI"
                        },
                        new
                        {
                            Id = 12,
                            Name = "RJ_45"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Audio"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Optical"
                        },
                        new
                        {
                            Id = 15,
                            Name = "PS_2"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Thunderbolt_3"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Thunderbolt_4"
                        });
                });

            modelBuilder.Entity("VueBase.Models.FormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_FormFactor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ATX"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SFX"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Inch_2_5"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Inch_3_5"
                        });
                });

            modelBuilder.Entity("VueBase.Models.GPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BaseClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BoostClock")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CUDAProcessors")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetID")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetProducerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InterfaceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxMonitors")
                        .HasColumnType("int");

                    b.Property<decimal>("MemoryBandwith")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MemoryBusId")
                        .HasColumnType("int");

                    b.Property<decimal>("MemoryFrequency")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MemoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConnectorID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedPSUWattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ResolutionID")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ChipsetID");

                    b.HasIndex("ChipsetProducerId");

                    b.HasIndex("InterfaceTypeId");

                    b.HasIndex("MemoryBusId");

                    b.HasIndex("MemoryId");

                    b.HasIndex("MemoryTypeId");

                    b.HasIndex("PowerConnectorID");

                    b.HasIndex("ProducerID");

                    b.HasIndex("ResolutionID");

                    b.ToTable("GPU");
                });

            modelBuilder.Entity("VueBase.Models.GPUChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Chipset");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GeForce_RTX_4070_Ti"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GeForce_RTX_4080"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radeon_RX_7600"
                        });
                });

            modelBuilder.Entity("VueBase.Models.HDD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CacheId")
                        .HasColumnType("int");

                    b.Property<int>("CapacityId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InterfaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int>("RPMId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CacheId");

                    b.HasIndex("CapacityId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("ProducerID");

                    b.HasIndex("RPMId");

                    b.ToTable("HDD");
                });

            modelBuilder.Entity("VueBase.Models.InterfaceTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_InterfaceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PCIExpress4_0x16"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PCI"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SATA_I"
                        },
                        new
                        {
                            Id = 5,
                            Name = "SATA_II"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SATA_III"
                        },
                        new
                        {
                            Id = 7,
                            Name = "M_2"
                        });
                });

            modelBuilder.Entity("VueBase.Models.InternalConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_InternalConnector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SATA_III"
                        },
                        new
                        {
                            Id = 3,
                            Name = "M_2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PCIe_3_0x16"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PCIe_3_0x1"
                        },
                        new
                        {
                            Id = 6,
                            Name = "PCIe_4_0x16"
                        },
                        new
                        {
                            Id = 7,
                            Name = "PCIe_4_0x1"
                        },
                        new
                        {
                            Id = 8,
                            Name = "USB_2_0"
                        },
                        new
                        {
                            Id = 9,
                            Name = "USB_3_2_Gen_1"
                        },
                        new
                        {
                            Id = 10,
                            Name = "USB_3_2_Gen_2"
                        });
                });

            modelBuilder.Entity("VueBase.Models.InternalGPUSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_InternalGPUSupport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "No"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryBus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryBus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Bit_64"
                        },
                        new
                        {
                            Id = 128,
                            Name = "Bit_128"
                        },
                        new
                        {
                            Id = 192,
                            Name = "Bit_192"
                        },
                        new
                        {
                            Id = 256,
                            Name = "Bit_256"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryChannel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Single"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dual"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Quad"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryFrequency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "MHz_2133"
                        },
                        new
                        {
                            Id = 3,
                            Name = "MHz_2400"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MHz_2666"
                        },
                        new
                        {
                            Id = 5,
                            Name = "MHz_2800"
                        },
                        new
                        {
                            Id = 6,
                            Name = "MHz_3000"
                        },
                        new
                        {
                            Id = 7,
                            Name = "MHz_3200"
                        },
                        new
                        {
                            Id = 8,
                            Name = "MHz_3600"
                        },
                        new
                        {
                            Id = 9,
                            Name = "MHz_4000"
                        },
                        new
                        {
                            Id = 10,
                            Name = "MHz_4266"
                        },
                        new
                        {
                            Id = 11,
                            Name = "MHz_4400"
                        },
                        new
                        {
                            Id = 12,
                            Name = "MHz_4600"
                        },
                        new
                        {
                            Id = 13,
                            Name = "MHz_4800"
                        },
                        new
                        {
                            Id = 14,
                            Name = "MHz_5000"
                        },
                        new
                        {
                            Id = 15,
                            Name = "MHz_5200"
                        },
                        new
                        {
                            Id = 16,
                            Name = "MHz_5333"
                        },
                        new
                        {
                            Id = 17,
                            Name = "MHz_5600"
                        },
                        new
                        {
                            Id = 18,
                            Name = "MHz_5800"
                        },
                        new
                        {
                            Id = 19,
                            Name = "MHz_6000"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemorySlots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemorySlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DIMM_2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DIMM_4"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SODIMM_2"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DDR4"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GDDR5"
                        },
                        new
                        {
                            Id = 4,
                            Name = "GDDR6"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HBM"
                        });
                });

            modelBuilder.Entity("VueBase.Models.MemoryTypeFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_MemoryTypeFrequency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DDR4_2133"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DDR4_2400"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DDR4_2666"
                        },
                        new
                        {
                            Id = 5,
                            Name = "DDR4_2800"
                        },
                        new
                        {
                            Id = 6,
                            Name = "DDR4_3000"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Modular", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Modular");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fully_Modular"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Semi_Modular"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Not_Modular"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Motherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CPUFamilyId")
                        .HasColumnType("int");

                    b.Property<int>("CPUSocketId")
                        .HasColumnType("int");

                    b.Property<int>("ChipsetId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InternalGPUSupportId")
                        .HasColumnType("int");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxMemoryId")
                        .HasColumnType("int");

                    b.Property<int>("MemoryChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CPUFamilyId");

                    b.HasIndex("CPUSocketId");

                    b.HasIndex("ChipsetId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("InternalGPUSupportId");

                    b.HasIndex("MaxMemoryId");

                    b.HasIndex("MemoryChannelId");

                    b.HasIndex("ProducerID");

                    b.ToTable("Motherboard");
                });

            modelBuilder.Entity("VueBase.Models.MotherboardChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_otherboardChipset");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "B450"
                        },
                        new
                        {
                            Id = 3,
                            Name = "B550"
                        },
                        new
                        {
                            Id = 4,
                            Name = "B760"
                        });
                });

            modelBuilder.Entity("VueBase.Models.PFC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_PFC");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Passive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Actove"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Ports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Ports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HDMI"
                        },
                        new
                        {
                            Id = 3,
                            Name = "DP"
                        });
                });

            modelBuilder.Entity("VueBase.Models.PowerConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_PowerConnector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pin_6"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Pin_8"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Pin_16"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Producers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AMD"
                        });
                });

            modelBuilder.Entity("VueBase.Models.ProtectionFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_ProtectionFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OVP"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UVP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SCP"
                        },
                        new
                        {
                            Id = 5,
                            Name = "OLP"
                        });
                });

            modelBuilder.Entity("VueBase.Models.PSU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CoolingId")
                        .HasColumnType("int");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ModularId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PFCId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProducerID")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wattage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoolingId");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("ModularId");

                    b.HasIndex("PFCId");

                    b.HasIndex("ProducerID");

                    b.HasIndex("RatingId");

                    b.ToTable("PSU");
                });

            modelBuilder.Entity("VueBase.Models.RAID", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_RAID");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "RAID_0"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RAID_1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RAID_5"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RAID_10"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Plus"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Plus_Bronze"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Plus_Silver"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Plus_Gold"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Plus_Platinum"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Plus_Titanium"
                        });
                });

            modelBuilder.Entity("VueBase.Models.Resolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_Resolution");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 720,
                            Name = "HD"
                        },
                        new
                        {
                            Id = 1080,
                            Name = "Full_HD"
                        },
                        new
                        {
                            Id = 1440,
                            Name = "Quad_HD"
                        },
                        new
                        {
                            Id = 2160,
                            Name = "Ultra_HD"
                        });
                });

            modelBuilder.Entity("VueBase.Models.RPM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_RPM");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 5400,
                            Name = "RPM_5400"
                        },
                        new
                        {
                            Id = 7200,
                            Name = "RPM_7200"
                        },
                        new
                        {
                            Id = 10000,
                            Name = "RPM_10000"
                        });
                });

            modelBuilder.Entity("VueBase.Models.WirelessTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enum_WirelessTechnology");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2,
                            Name = "WiFi_4"
                        },
                        new
                        {
                            Id = 3,
                            Name = "WiFi_5"
                        },
                        new
                        {
                            Id = 4,
                            Name = "WiFi_6"
                        },
                        new
                        {
                            Id = 5,
                            Name = "WiFi_6E"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bluetooth_4_0"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bluetooth_4_2"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bluetooth_5_0"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Bluetooth_5_1"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bluetooth_5_2"
                        });
                });

            modelBuilder.Entity("Join_CPUColor", b =>
                {
                    b.HasOne("VueBase.Models.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPUMemoryTypeFrequency", b =>
                {
                    b.HasOne("VueBase.Models.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryTypeFrequency", null)
                        .WithMany()
                        .HasForeignKey("MemoryTypeFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_CPUMotherboardChipset", b =>
                {
                    b.HasOne("VueBase.Models.CPU", null)
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MotherboardChipset", null)
                        .WithMany()
                        .HasForeignKey("MotherboardChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_GPUColor", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.GPU", null)
                        .WithMany()
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_GPUPort", b =>
                {
                    b.HasOne("VueBase.Models.GPU", null)
                        .WithMany()
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Ports", null)
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_HDDColor", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.HDD", null)
                        .WithMany()
                        .HasForeignKey("HDDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_MotherboardColor", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_MotherboardExternalConnector", b =>
                {
                    b.HasOne("VueBase.Models.ExternalConnector", null)
                        .WithMany()
                        .HasForeignKey("ExternalConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_MotherboardInternalConnector", b =>
                {
                    b.HasOne("VueBase.Models.InternalConnector", null)
                        .WithMany()
                        .HasForeignKey("InternalConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_MotherboardMemoryFrequency", b =>
                {
                    b.HasOne("VueBase.Models.MemoryFrequency", null)
                        .WithMany()
                        .HasForeignKey("MemoryFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_MotherboardMemorySlots", b =>
                {
                    b.HasOne("VueBase.Models.MemorySlots", null)
                        .WithMany()
                        .HasForeignKey("MemorySlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_MotherboardRAID", b =>
                {
                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.RAID", null)
                        .WithMany()
                        .HasForeignKey("RAIDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_MotherboardWirelessTechnology", b =>
                {
                    b.HasOne("VueBase.Models.Motherboard", null)
                        .WithMany()
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.WirelessTechnology", null)
                        .WithMany()
                        .HasForeignKey("WirelessTechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSUColor", b =>
                {
                    b.HasOne("VueBase.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSUConnector", b =>
                {
                    b.HasOne("VueBase.Models.Connectors", null)
                        .WithMany()
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Join_PSUProtectionFeatures", b =>
                {
                    b.HasOne("VueBase.Models.PSU", null)
                        .WithMany()
                        .HasForeignKey("PSUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.ProtectionFeatures", null)
                        .WithMany()
                        .HasForeignKey("ProtectionFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VueBase.Models.CPU", b =>
                {
                    b.HasOne("VueBase.Models.Architecture", "Architecture")
                        .WithMany()
                        .HasForeignKey("ArchitectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Cache", "CacheL1")
                        .WithMany()
                        .HasForeignKey("CacheL1Id");

                    b.HasOne("VueBase.Models.Cache", "CacheL2")
                        .WithMany()
                        .HasForeignKey("CacheL2Id");

                    b.HasOne("VueBase.Models.Cache", "CacheL3")
                        .WithMany()
                        .HasForeignKey("CacheL3Id");

                    b.HasOne("VueBase.Models.DataWidth", "DataWidth")
                        .WithMany()
                        .HasForeignKey("DataWidthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.GPU", "InternalGPU")
                        .WithMany()
                        .HasForeignKey("InternalGPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "MaxMemory")
                        .WithMany()
                        .HasForeignKey("MaxMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.Navigation("Architecture");

                    b.Navigation("CPUSocket");

                    b.Navigation("CacheL1");

                    b.Navigation("CacheL2");

                    b.Navigation("CacheL3");

                    b.Navigation("DataWidth");

                    b.Navigation("InternalGPU");

                    b.Navigation("MaxMemory");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.GPU", b =>
                {
                    b.HasOne("VueBase.Models.GPUChipset", "Chipset")
                        .WithMany()
                        .HasForeignKey("ChipsetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "ChipsetProducer")
                        .WithMany()
                        .HasForeignKey("ChipsetProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InterfaceTypes", "InterfaceType")
                        .WithMany()
                        .HasForeignKey("InterfaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryBus", "MemoryBus")
                        .WithMany()
                        .HasForeignKey("MemoryBusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Memory")
                        .WithMany()
                        .HasForeignKey("MemoryId");

                    b.HasOne("VueBase.Models.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PowerConnector", "PowerConnector")
                        .WithMany()
                        .HasForeignKey("PowerConnectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.Resolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chipset");

                    b.Navigation("ChipsetProducer");

                    b.Navigation("InterfaceType");

                    b.Navigation("Memory");

                    b.Navigation("MemoryBus");

                    b.Navigation("MemoryType");

                    b.Navigation("PowerConnector");

                    b.Navigation("Producer");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("VueBase.Models.HDD", b =>
                {
                    b.HasOne("VueBase.Models.Cache", "Cache")
                        .WithMany()
                        .HasForeignKey("CacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "Capacity")
                        .WithMany()
                        .HasForeignKey("CapacityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InterfaceTypes", "Interface")
                        .WithMany()
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.RPM", "RPM")
                        .WithMany()
                        .HasForeignKey("RPMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cache");

                    b.Navigation("Capacity");

                    b.Navigation("FormFactor");

                    b.Navigation("Interface");

                    b.Navigation("Producer");

                    b.Navigation("RPM");
                });

            modelBuilder.Entity("VueBase.Models.Motherboard", b =>
                {
                    b.HasOne("VueBase.Models.CPUFamily", "CPUFamily")
                        .WithMany()
                        .HasForeignKey("CPUFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MotherboardChipset", "Chipset")
                        .WithMany()
                        .HasForeignKey("ChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.InternalGPUSupport", "InternalGPUSupport")
                        .WithMany()
                        .HasForeignKey("InternalGPUSupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Capacity", "MaxMemory")
                        .WithMany()
                        .HasForeignKey("MaxMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.MemoryChannel", "MemoryChannel")
                        .WithMany()
                        .HasForeignKey("MemoryChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.Navigation("CPUFamily");

                    b.Navigation("CPUSocket");

                    b.Navigation("Chipset");

                    b.Navigation("FormFactor");

                    b.Navigation("InternalGPUSupport");

                    b.Navigation("MaxMemory");

                    b.Navigation("MemoryChannel");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("VueBase.Models.PSU", b =>
                {
                    b.HasOne("VueBase.Models.Cooling", "Cooling")
                        .WithMany()
                        .HasForeignKey("CoolingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.FormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Modular", "Modular")
                        .WithMany()
                        .HasForeignKey("ModularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.PFC", "PFC")
                        .WithMany()
                        .HasForeignKey("PFCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VueBase.Models.Producers", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerID");

                    b.HasOne("VueBase.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cooling");

                    b.Navigation("FormFactor");

                    b.Navigation("Modular");

                    b.Navigation("PFC");

                    b.Navigation("Producer");

                    b.Navigation("Rating");
                });
#pragma warning restore 612, 618
        }
    }
}
